
luva.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a64  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002b70  08002b70  00012b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002bc8  08002bc8  00012bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002bcc  08002bcc  00012bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08002bd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000124  2000000c  08002bdc  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000130  08002bdc  00020130  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000839a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000014b8  00000000  00000000  000283cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000008d8  00000000  00000000  00029888  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000840  00000000  00000000  0002a160  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000042e4  00000000  00000000  0002a9a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002a4d  00000000  00000000  0002ec84  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000316d1  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000242c  00000000  00000000  00031750  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b58 	.word	0x08002b58

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002b58 	.word	0x08002b58

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4a08      	ldr	r2, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f905 	bl	800036c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 fb5c 	bl	8002824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f90f 	bl	80003ba <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f8e5 	bl	8000382 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000028 	.word	0x20000028

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000028 	.word	0x20000028

08000210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f003 0307 	and.w	r3, r3, #7
 800021e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000226:	68ba      	ldr	r2, [r7, #8]
 8000228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800022c:	4013      	ands	r3, r2
 800022e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800023c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000242:	4a04      	ldr	r2, [pc, #16]	; (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	60d3      	str	r3, [r2, #12]
}
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <__NVIC_GetPriorityGrouping+0x18>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	0a1b      	lsrs	r3, r3, #8
 8000262:	f003 0307 	and.w	r3, r3, #7
}
 8000266:	4618      	mov	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	6039      	str	r1, [r7, #0]
 800027e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000284:	2b00      	cmp	r3, #0
 8000286:	db0a      	blt.n	800029e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000288:	490d      	ldr	r1, [pc, #52]	; (80002c0 <__NVIC_SetPriority+0x4c>)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	683a      	ldr	r2, [r7, #0]
 8000290:	b2d2      	uxtb	r2, r2
 8000292:	0112      	lsls	r2, r2, #4
 8000294:	b2d2      	uxtb	r2, r2
 8000296:	440b      	add	r3, r1
 8000298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800029c:	e00a      	b.n	80002b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029e:	4909      	ldr	r1, [pc, #36]	; (80002c4 <__NVIC_SetPriority+0x50>)
 80002a0:	79fb      	ldrb	r3, [r7, #7]
 80002a2:	f003 030f 	and.w	r3, r3, #15
 80002a6:	3b04      	subs	r3, #4
 80002a8:	683a      	ldr	r2, [r7, #0]
 80002aa:	b2d2      	uxtb	r2, r2
 80002ac:	0112      	lsls	r2, r2, #4
 80002ae:	b2d2      	uxtb	r2, r2
 80002b0:	440b      	add	r3, r1
 80002b2:	761a      	strb	r2, [r3, #24]
}
 80002b4:	bf00      	nop
 80002b6:	370c      	adds	r7, #12
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bc80      	pop	{r7}
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	e000e100 	.word	0xe000e100
 80002c4:	e000ed00 	.word	0xe000ed00

080002c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b089      	sub	sp, #36	; 0x24
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	60f8      	str	r0, [r7, #12]
 80002d0:	60b9      	str	r1, [r7, #8]
 80002d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	f003 0307 	and.w	r3, r3, #7
 80002da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002dc:	69fb      	ldr	r3, [r7, #28]
 80002de:	f1c3 0307 	rsb	r3, r3, #7
 80002e2:	2b04      	cmp	r3, #4
 80002e4:	bf28      	it	cs
 80002e6:	2304      	movcs	r3, #4
 80002e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ea:	69fb      	ldr	r3, [r7, #28]
 80002ec:	3304      	adds	r3, #4
 80002ee:	2b06      	cmp	r3, #6
 80002f0:	d902      	bls.n	80002f8 <NVIC_EncodePriority+0x30>
 80002f2:	69fb      	ldr	r3, [r7, #28]
 80002f4:	3b03      	subs	r3, #3
 80002f6:	e000      	b.n	80002fa <NVIC_EncodePriority+0x32>
 80002f8:	2300      	movs	r3, #0
 80002fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002fc:	2201      	movs	r2, #1
 80002fe:	69bb      	ldr	r3, [r7, #24]
 8000300:	fa02 f303 	lsl.w	r3, r2, r3
 8000304:	1e5a      	subs	r2, r3, #1
 8000306:	68bb      	ldr	r3, [r7, #8]
 8000308:	401a      	ands	r2, r3
 800030a:	697b      	ldr	r3, [r7, #20]
 800030c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800030e:	2101      	movs	r1, #1
 8000310:	697b      	ldr	r3, [r7, #20]
 8000312:	fa01 f303 	lsl.w	r3, r1, r3
 8000316:	1e59      	subs	r1, r3, #1
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800031c:	4313      	orrs	r3, r2
         );
}
 800031e:	4618      	mov	r0, r3
 8000320:	3724      	adds	r7, #36	; 0x24
 8000322:	46bd      	mov	sp, r7
 8000324:	bc80      	pop	{r7}
 8000326:	4770      	bx	lr

08000328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	3b01      	subs	r3, #1
 8000334:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000338:	d301      	bcc.n	800033e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800033a:	2301      	movs	r3, #1
 800033c:	e00f      	b.n	800035e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800033e:	4a0a      	ldr	r2, [pc, #40]	; (8000368 <SysTick_Config+0x40>)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	3b01      	subs	r3, #1
 8000344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000346:	210f      	movs	r1, #15
 8000348:	f04f 30ff 	mov.w	r0, #4294967295
 800034c:	f7ff ff92 	bl	8000274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000350:	4b05      	ldr	r3, [pc, #20]	; (8000368 <SysTick_Config+0x40>)
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000356:	4b04      	ldr	r3, [pc, #16]	; (8000368 <SysTick_Config+0x40>)
 8000358:	2207      	movs	r2, #7
 800035a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800035c:	2300      	movs	r3, #0
}
 800035e:	4618      	mov	r0, r3
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	e000e010 	.word	0xe000e010

0800036c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000374:	6878      	ldr	r0, [r7, #4]
 8000376:	f7ff ff4b 	bl	8000210 <__NVIC_SetPriorityGrouping>
}
 800037a:	bf00      	nop
 800037c:	3708      	adds	r7, #8
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}

08000382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000382:	b580      	push	{r7, lr}
 8000384:	b086      	sub	sp, #24
 8000386:	af00      	add	r7, sp, #0
 8000388:	4603      	mov	r3, r0
 800038a:	60b9      	str	r1, [r7, #8]
 800038c:	607a      	str	r2, [r7, #4]
 800038e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000390:	2300      	movs	r3, #0
 8000392:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000394:	f7ff ff60 	bl	8000258 <__NVIC_GetPriorityGrouping>
 8000398:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800039a:	687a      	ldr	r2, [r7, #4]
 800039c:	68b9      	ldr	r1, [r7, #8]
 800039e:	6978      	ldr	r0, [r7, #20]
 80003a0:	f7ff ff92 	bl	80002c8 <NVIC_EncodePriority>
 80003a4:	4602      	mov	r2, r0
 80003a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003aa:	4611      	mov	r1, r2
 80003ac:	4618      	mov	r0, r3
 80003ae:	f7ff ff61 	bl	8000274 <__NVIC_SetPriority>
}
 80003b2:	bf00      	nop
 80003b4:	3718      	adds	r7, #24
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}

080003ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80003ba:	b580      	push	{r7, lr}
 80003bc:	b082      	sub	sp, #8
 80003be:	af00      	add	r7, sp, #0
 80003c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80003c2:	6878      	ldr	r0, [r7, #4]
 80003c4:	f7ff ffb0 	bl	8000328 <SysTick_Config>
 80003c8:	4603      	mov	r3, r0
}
 80003ca:	4618      	mov	r0, r3
 80003cc:	3708      	adds	r7, #8
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
	...

080003d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b08b      	sub	sp, #44	; 0x2c
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
 80003dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80003de:	2300      	movs	r3, #0
 80003e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80003e2:	2300      	movs	r3, #0
 80003e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80003e6:	e127      	b.n	8000638 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80003e8:	2201      	movs	r2, #1
 80003ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003ec:	fa02 f303 	lsl.w	r3, r2, r3
 80003f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	681a      	ldr	r2, [r3, #0]
 80003f6:	69fb      	ldr	r3, [r7, #28]
 80003f8:	4013      	ands	r3, r2
 80003fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80003fc:	69ba      	ldr	r2, [r7, #24]
 80003fe:	69fb      	ldr	r3, [r7, #28]
 8000400:	429a      	cmp	r2, r3
 8000402:	f040 8116 	bne.w	8000632 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	685b      	ldr	r3, [r3, #4]
 800040a:	2b12      	cmp	r3, #18
 800040c:	d034      	beq.n	8000478 <HAL_GPIO_Init+0xa4>
 800040e:	2b12      	cmp	r3, #18
 8000410:	d80d      	bhi.n	800042e <HAL_GPIO_Init+0x5a>
 8000412:	2b02      	cmp	r3, #2
 8000414:	d02b      	beq.n	800046e <HAL_GPIO_Init+0x9a>
 8000416:	2b02      	cmp	r3, #2
 8000418:	d804      	bhi.n	8000424 <HAL_GPIO_Init+0x50>
 800041a:	2b00      	cmp	r3, #0
 800041c:	d031      	beq.n	8000482 <HAL_GPIO_Init+0xae>
 800041e:	2b01      	cmp	r3, #1
 8000420:	d01c      	beq.n	800045c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000422:	e048      	b.n	80004b6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000424:	2b03      	cmp	r3, #3
 8000426:	d043      	beq.n	80004b0 <HAL_GPIO_Init+0xdc>
 8000428:	2b11      	cmp	r3, #17
 800042a:	d01b      	beq.n	8000464 <HAL_GPIO_Init+0x90>
          break;
 800042c:	e043      	b.n	80004b6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800042e:	4a89      	ldr	r2, [pc, #548]	; (8000654 <HAL_GPIO_Init+0x280>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d026      	beq.n	8000482 <HAL_GPIO_Init+0xae>
 8000434:	4a87      	ldr	r2, [pc, #540]	; (8000654 <HAL_GPIO_Init+0x280>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d806      	bhi.n	8000448 <HAL_GPIO_Init+0x74>
 800043a:	4a87      	ldr	r2, [pc, #540]	; (8000658 <HAL_GPIO_Init+0x284>)
 800043c:	4293      	cmp	r3, r2
 800043e:	d020      	beq.n	8000482 <HAL_GPIO_Init+0xae>
 8000440:	4a86      	ldr	r2, [pc, #536]	; (800065c <HAL_GPIO_Init+0x288>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d01d      	beq.n	8000482 <HAL_GPIO_Init+0xae>
          break;
 8000446:	e036      	b.n	80004b6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000448:	4a85      	ldr	r2, [pc, #532]	; (8000660 <HAL_GPIO_Init+0x28c>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d019      	beq.n	8000482 <HAL_GPIO_Init+0xae>
 800044e:	4a85      	ldr	r2, [pc, #532]	; (8000664 <HAL_GPIO_Init+0x290>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d016      	beq.n	8000482 <HAL_GPIO_Init+0xae>
 8000454:	4a84      	ldr	r2, [pc, #528]	; (8000668 <HAL_GPIO_Init+0x294>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d013      	beq.n	8000482 <HAL_GPIO_Init+0xae>
          break;
 800045a:	e02c      	b.n	80004b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800045c:	683b      	ldr	r3, [r7, #0]
 800045e:	68db      	ldr	r3, [r3, #12]
 8000460:	623b      	str	r3, [r7, #32]
          break;
 8000462:	e028      	b.n	80004b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	68db      	ldr	r3, [r3, #12]
 8000468:	3304      	adds	r3, #4
 800046a:	623b      	str	r3, [r7, #32]
          break;
 800046c:	e023      	b.n	80004b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800046e:	683b      	ldr	r3, [r7, #0]
 8000470:	68db      	ldr	r3, [r3, #12]
 8000472:	3308      	adds	r3, #8
 8000474:	623b      	str	r3, [r7, #32]
          break;
 8000476:	e01e      	b.n	80004b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	68db      	ldr	r3, [r3, #12]
 800047c:	330c      	adds	r3, #12
 800047e:	623b      	str	r3, [r7, #32]
          break;
 8000480:	e019      	b.n	80004b6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	689b      	ldr	r3, [r3, #8]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d102      	bne.n	8000490 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800048a:	2304      	movs	r3, #4
 800048c:	623b      	str	r3, [r7, #32]
          break;
 800048e:	e012      	b.n	80004b6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	689b      	ldr	r3, [r3, #8]
 8000494:	2b01      	cmp	r3, #1
 8000496:	d105      	bne.n	80004a4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000498:	2308      	movs	r3, #8
 800049a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	69fa      	ldr	r2, [r7, #28]
 80004a0:	611a      	str	r2, [r3, #16]
          break;
 80004a2:	e008      	b.n	80004b6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004a4:	2308      	movs	r3, #8
 80004a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	69fa      	ldr	r2, [r7, #28]
 80004ac:	615a      	str	r2, [r3, #20]
          break;
 80004ae:	e002      	b.n	80004b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80004b0:	2300      	movs	r3, #0
 80004b2:	623b      	str	r3, [r7, #32]
          break;
 80004b4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80004b6:	69bb      	ldr	r3, [r7, #24]
 80004b8:	2bff      	cmp	r3, #255	; 0xff
 80004ba:	d801      	bhi.n	80004c0 <HAL_GPIO_Init+0xec>
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	e001      	b.n	80004c4 <HAL_GPIO_Init+0xf0>
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	3304      	adds	r3, #4
 80004c4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80004c6:	69bb      	ldr	r3, [r7, #24]
 80004c8:	2bff      	cmp	r3, #255	; 0xff
 80004ca:	d802      	bhi.n	80004d2 <HAL_GPIO_Init+0xfe>
 80004cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ce:	009b      	lsls	r3, r3, #2
 80004d0:	e002      	b.n	80004d8 <HAL_GPIO_Init+0x104>
 80004d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004d4:	3b08      	subs	r3, #8
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80004da:	697b      	ldr	r3, [r7, #20]
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	210f      	movs	r1, #15
 80004e0:	693b      	ldr	r3, [r7, #16]
 80004e2:	fa01 f303 	lsl.w	r3, r1, r3
 80004e6:	43db      	mvns	r3, r3
 80004e8:	401a      	ands	r2, r3
 80004ea:	6a39      	ldr	r1, [r7, #32]
 80004ec:	693b      	ldr	r3, [r7, #16]
 80004ee:	fa01 f303 	lsl.w	r3, r1, r3
 80004f2:	431a      	orrs	r2, r3
 80004f4:	697b      	ldr	r3, [r7, #20]
 80004f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	685b      	ldr	r3, [r3, #4]
 80004fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000500:	2b00      	cmp	r3, #0
 8000502:	f000 8096 	beq.w	8000632 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000506:	4a59      	ldr	r2, [pc, #356]	; (800066c <HAL_GPIO_Init+0x298>)
 8000508:	4b58      	ldr	r3, [pc, #352]	; (800066c <HAL_GPIO_Init+0x298>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	6193      	str	r3, [r2, #24]
 8000512:	4b56      	ldr	r3, [pc, #344]	; (800066c <HAL_GPIO_Init+0x298>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800051e:	4a54      	ldr	r2, [pc, #336]	; (8000670 <HAL_GPIO_Init+0x29c>)
 8000520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000522:	089b      	lsrs	r3, r3, #2
 8000524:	3302      	adds	r3, #2
 8000526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800052a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800052c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800052e:	f003 0303 	and.w	r3, r3, #3
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	220f      	movs	r2, #15
 8000536:	fa02 f303 	lsl.w	r3, r2, r3
 800053a:	43db      	mvns	r3, r3
 800053c:	68fa      	ldr	r2, [r7, #12]
 800053e:	4013      	ands	r3, r2
 8000540:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4a4b      	ldr	r2, [pc, #300]	; (8000674 <HAL_GPIO_Init+0x2a0>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d013      	beq.n	8000572 <HAL_GPIO_Init+0x19e>
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4a4a      	ldr	r2, [pc, #296]	; (8000678 <HAL_GPIO_Init+0x2a4>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d00d      	beq.n	800056e <HAL_GPIO_Init+0x19a>
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4a49      	ldr	r2, [pc, #292]	; (800067c <HAL_GPIO_Init+0x2a8>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d007      	beq.n	800056a <HAL_GPIO_Init+0x196>
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4a48      	ldr	r2, [pc, #288]	; (8000680 <HAL_GPIO_Init+0x2ac>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d101      	bne.n	8000566 <HAL_GPIO_Init+0x192>
 8000562:	2303      	movs	r3, #3
 8000564:	e006      	b.n	8000574 <HAL_GPIO_Init+0x1a0>
 8000566:	2304      	movs	r3, #4
 8000568:	e004      	b.n	8000574 <HAL_GPIO_Init+0x1a0>
 800056a:	2302      	movs	r3, #2
 800056c:	e002      	b.n	8000574 <HAL_GPIO_Init+0x1a0>
 800056e:	2301      	movs	r3, #1
 8000570:	e000      	b.n	8000574 <HAL_GPIO_Init+0x1a0>
 8000572:	2300      	movs	r3, #0
 8000574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000576:	f002 0203 	and.w	r2, r2, #3
 800057a:	0092      	lsls	r2, r2, #2
 800057c:	4093      	lsls	r3, r2
 800057e:	68fa      	ldr	r2, [r7, #12]
 8000580:	4313      	orrs	r3, r2
 8000582:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000584:	493a      	ldr	r1, [pc, #232]	; (8000670 <HAL_GPIO_Init+0x29c>)
 8000586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000588:	089b      	lsrs	r3, r3, #2
 800058a:	3302      	adds	r3, #2
 800058c:	68fa      	ldr	r2, [r7, #12]
 800058e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	685b      	ldr	r3, [r3, #4]
 8000596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800059a:	2b00      	cmp	r3, #0
 800059c:	d006      	beq.n	80005ac <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800059e:	4939      	ldr	r1, [pc, #228]	; (8000684 <HAL_GPIO_Init+0x2b0>)
 80005a0:	4b38      	ldr	r3, [pc, #224]	; (8000684 <HAL_GPIO_Init+0x2b0>)
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	69bb      	ldr	r3, [r7, #24]
 80005a6:	4313      	orrs	r3, r2
 80005a8:	600b      	str	r3, [r1, #0]
 80005aa:	e006      	b.n	80005ba <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80005ac:	4935      	ldr	r1, [pc, #212]	; (8000684 <HAL_GPIO_Init+0x2b0>)
 80005ae:	4b35      	ldr	r3, [pc, #212]	; (8000684 <HAL_GPIO_Init+0x2b0>)
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	69bb      	ldr	r3, [r7, #24]
 80005b4:	43db      	mvns	r3, r3
 80005b6:	4013      	ands	r3, r2
 80005b8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d006      	beq.n	80005d4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80005c6:	492f      	ldr	r1, [pc, #188]	; (8000684 <HAL_GPIO_Init+0x2b0>)
 80005c8:	4b2e      	ldr	r3, [pc, #184]	; (8000684 <HAL_GPIO_Init+0x2b0>)
 80005ca:	685a      	ldr	r2, [r3, #4]
 80005cc:	69bb      	ldr	r3, [r7, #24]
 80005ce:	4313      	orrs	r3, r2
 80005d0:	604b      	str	r3, [r1, #4]
 80005d2:	e006      	b.n	80005e2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80005d4:	492b      	ldr	r1, [pc, #172]	; (8000684 <HAL_GPIO_Init+0x2b0>)
 80005d6:	4b2b      	ldr	r3, [pc, #172]	; (8000684 <HAL_GPIO_Init+0x2b0>)
 80005d8:	685a      	ldr	r2, [r3, #4]
 80005da:	69bb      	ldr	r3, [r7, #24]
 80005dc:	43db      	mvns	r3, r3
 80005de:	4013      	ands	r3, r2
 80005e0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d006      	beq.n	80005fc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80005ee:	4925      	ldr	r1, [pc, #148]	; (8000684 <HAL_GPIO_Init+0x2b0>)
 80005f0:	4b24      	ldr	r3, [pc, #144]	; (8000684 <HAL_GPIO_Init+0x2b0>)
 80005f2:	689a      	ldr	r2, [r3, #8]
 80005f4:	69bb      	ldr	r3, [r7, #24]
 80005f6:	4313      	orrs	r3, r2
 80005f8:	608b      	str	r3, [r1, #8]
 80005fa:	e006      	b.n	800060a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80005fc:	4921      	ldr	r1, [pc, #132]	; (8000684 <HAL_GPIO_Init+0x2b0>)
 80005fe:	4b21      	ldr	r3, [pc, #132]	; (8000684 <HAL_GPIO_Init+0x2b0>)
 8000600:	689a      	ldr	r2, [r3, #8]
 8000602:	69bb      	ldr	r3, [r7, #24]
 8000604:	43db      	mvns	r3, r3
 8000606:	4013      	ands	r3, r2
 8000608:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000612:	2b00      	cmp	r3, #0
 8000614:	d006      	beq.n	8000624 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000616:	491b      	ldr	r1, [pc, #108]	; (8000684 <HAL_GPIO_Init+0x2b0>)
 8000618:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <HAL_GPIO_Init+0x2b0>)
 800061a:	68da      	ldr	r2, [r3, #12]
 800061c:	69bb      	ldr	r3, [r7, #24]
 800061e:	4313      	orrs	r3, r2
 8000620:	60cb      	str	r3, [r1, #12]
 8000622:	e006      	b.n	8000632 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000624:	4917      	ldr	r1, [pc, #92]	; (8000684 <HAL_GPIO_Init+0x2b0>)
 8000626:	4b17      	ldr	r3, [pc, #92]	; (8000684 <HAL_GPIO_Init+0x2b0>)
 8000628:	68da      	ldr	r2, [r3, #12]
 800062a:	69bb      	ldr	r3, [r7, #24]
 800062c:	43db      	mvns	r3, r3
 800062e:	4013      	ands	r3, r2
 8000630:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000634:	3301      	adds	r3, #1
 8000636:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800063e:	fa22 f303 	lsr.w	r3, r2, r3
 8000642:	2b00      	cmp	r3, #0
 8000644:	f47f aed0 	bne.w	80003e8 <HAL_GPIO_Init+0x14>
  }
}
 8000648:	bf00      	nop
 800064a:	372c      	adds	r7, #44	; 0x2c
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	10210000 	.word	0x10210000
 8000658:	10110000 	.word	0x10110000
 800065c:	10120000 	.word	0x10120000
 8000660:	10310000 	.word	0x10310000
 8000664:	10320000 	.word	0x10320000
 8000668:	10220000 	.word	0x10220000
 800066c:	40021000 	.word	0x40021000
 8000670:	40010000 	.word	0x40010000
 8000674:	40010800 	.word	0x40010800
 8000678:	40010c00 	.word	0x40010c00
 800067c:	40011000 	.word	0x40011000
 8000680:	40011400 	.word	0x40011400
 8000684:	40010400 	.word	0x40010400

08000688 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000688:	b590      	push	{r4, r7, lr}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d101      	bne.n	800069a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000696:	2301      	movs	r3, #1
 8000698:	e10f      	b.n	80008ba <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d106      	bne.n	80006b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2200      	movs	r2, #0
 80006aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f002 f8ea 	bl	8002888 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2224      	movs	r2, #36	; 0x24
 80006b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	6812      	ldr	r2, [r2, #0]
 80006c4:	6812      	ldr	r2, [r2, #0]
 80006c6:	f022 0201 	bic.w	r2, r2, #1
 80006ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80006cc:	f001 fc30 	bl	8001f30 <HAL_RCC_GetPCLK1Freq>
 80006d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	4a7b      	ldr	r2, [pc, #492]	; (80008c4 <HAL_I2C_Init+0x23c>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d807      	bhi.n	80006ec <HAL_I2C_Init+0x64>
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	4a7a      	ldr	r2, [pc, #488]	; (80008c8 <HAL_I2C_Init+0x240>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	bf94      	ite	ls
 80006e4:	2301      	movls	r3, #1
 80006e6:	2300      	movhi	r3, #0
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	e006      	b.n	80006fa <HAL_I2C_Init+0x72>
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	4a77      	ldr	r2, [pc, #476]	; (80008cc <HAL_I2C_Init+0x244>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	bf94      	ite	ls
 80006f4:	2301      	movls	r3, #1
 80006f6:	2300      	movhi	r3, #0
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80006fe:	2301      	movs	r3, #1
 8000700:	e0db      	b.n	80008ba <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	4a72      	ldr	r2, [pc, #456]	; (80008d0 <HAL_I2C_Init+0x248>)
 8000706:	fba2 2303 	umull	r2, r3, r2, r3
 800070a:	0c9b      	lsrs	r3, r3, #18
 800070c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	6812      	ldr	r2, [r2, #0]
 8000716:	6852      	ldr	r2, [r2, #4]
 8000718:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 800071c:	68ba      	ldr	r2, [r7, #8]
 800071e:	430a      	orrs	r2, r1
 8000720:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	6a1b      	ldr	r3, [r3, #32]
 800072c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	4863      	ldr	r0, [pc, #396]	; (80008c4 <HAL_I2C_Init+0x23c>)
 8000736:	4283      	cmp	r3, r0
 8000738:	d802      	bhi.n	8000740 <HAL_I2C_Init+0xb8>
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	3301      	adds	r3, #1
 800073e:	e009      	b.n	8000754 <HAL_I2C_Init+0xcc>
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000746:	fb00 f303 	mul.w	r3, r0, r3
 800074a:	4862      	ldr	r0, [pc, #392]	; (80008d4 <HAL_I2C_Init+0x24c>)
 800074c:	fba0 0303 	umull	r0, r3, r0, r3
 8000750:	099b      	lsrs	r3, r3, #6
 8000752:	3301      	adds	r3, #1
 8000754:	430b      	orrs	r3, r1
 8000756:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	6818      	ldr	r0, [r3, #0]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	69db      	ldr	r3, [r3, #28]
 8000762:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000766:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	4955      	ldr	r1, [pc, #340]	; (80008c4 <HAL_I2C_Init+0x23c>)
 8000770:	428b      	cmp	r3, r1
 8000772:	d80d      	bhi.n	8000790 <HAL_I2C_Init+0x108>
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	1e59      	subs	r1, r3, #1
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	005b      	lsls	r3, r3, #1
 800077e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000782:	3301      	adds	r3, #1
 8000784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000788:	2b04      	cmp	r3, #4
 800078a:	bf38      	it	cc
 800078c:	2304      	movcc	r3, #4
 800078e:	e04f      	b.n	8000830 <HAL_I2C_Init+0x1a8>
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	689b      	ldr	r3, [r3, #8]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d111      	bne.n	80007bc <HAL_I2C_Init+0x134>
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	1e5c      	subs	r4, r3, #1
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	6859      	ldr	r1, [r3, #4]
 80007a0:	460b      	mov	r3, r1
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	440b      	add	r3, r1
 80007a6:	fbb4 f3f3 	udiv	r3, r4, r3
 80007aa:	3301      	adds	r3, #1
 80007ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	bf0c      	ite	eq
 80007b4:	2301      	moveq	r3, #1
 80007b6:	2300      	movne	r3, #0
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	e012      	b.n	80007e2 <HAL_I2C_Init+0x15a>
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	1e5c      	subs	r4, r3, #1
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6859      	ldr	r1, [r3, #4]
 80007c4:	460b      	mov	r3, r1
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	440b      	add	r3, r1
 80007ca:	0099      	lsls	r1, r3, #2
 80007cc:	440b      	add	r3, r1
 80007ce:	fbb4 f3f3 	udiv	r3, r4, r3
 80007d2:	3301      	adds	r3, #1
 80007d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007d8:	2b00      	cmp	r3, #0
 80007da:	bf0c      	ite	eq
 80007dc:	2301      	moveq	r3, #1
 80007de:	2300      	movne	r3, #0
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <HAL_I2C_Init+0x162>
 80007e6:	2301      	movs	r3, #1
 80007e8:	e022      	b.n	8000830 <HAL_I2C_Init+0x1a8>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	689b      	ldr	r3, [r3, #8]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d10e      	bne.n	8000810 <HAL_I2C_Init+0x188>
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	1e5c      	subs	r4, r3, #1
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6859      	ldr	r1, [r3, #4]
 80007fa:	460b      	mov	r3, r1
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	440b      	add	r3, r1
 8000800:	fbb4 f3f3 	udiv	r3, r4, r3
 8000804:	3301      	adds	r3, #1
 8000806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800080a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800080e:	e00f      	b.n	8000830 <HAL_I2C_Init+0x1a8>
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	1e5c      	subs	r4, r3, #1
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	6859      	ldr	r1, [r3, #4]
 8000818:	460b      	mov	r3, r1
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	440b      	add	r3, r1
 800081e:	0099      	lsls	r1, r3, #2
 8000820:	440b      	add	r3, r1
 8000822:	fbb4 f3f3 	udiv	r3, r4, r3
 8000826:	3301      	adds	r3, #1
 8000828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800082c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000830:	4313      	orrs	r3, r2
 8000832:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	6812      	ldr	r2, [r2, #0]
 800083c:	6812      	ldr	r2, [r2, #0]
 800083e:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	69d0      	ldr	r0, [r2, #28]
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	6a12      	ldr	r2, [r2, #32]
 800084a:	4302      	orrs	r2, r0
 800084c:	430a      	orrs	r2, r1
 800084e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800085e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	6908      	ldr	r0, [r1, #16]
 8000866:	6879      	ldr	r1, [r7, #4]
 8000868:	68c9      	ldr	r1, [r1, #12]
 800086a:	4301      	orrs	r1, r0
 800086c:	430b      	orrs	r3, r1
 800086e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	6812      	ldr	r2, [r2, #0]
 8000878:	68d2      	ldr	r2, [r2, #12]
 800087a:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	6950      	ldr	r0, [r2, #20]
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	6992      	ldr	r2, [r2, #24]
 8000886:	4302      	orrs	r2, r0
 8000888:	430a      	orrs	r2, r1
 800088a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	6812      	ldr	r2, [r2, #0]
 8000894:	6812      	ldr	r2, [r2, #0]
 8000896:	f042 0201 	orr.w	r2, r2, #1
 800089a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2200      	movs	r2, #0
 80008a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2220      	movs	r2, #32
 80008a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2200      	movs	r2, #0
 80008ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2200      	movs	r2, #0
 80008b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3714      	adds	r7, #20
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd90      	pop	{r4, r7, pc}
 80008c2:	bf00      	nop
 80008c4:	000186a0 	.word	0x000186a0
 80008c8:	001e847f 	.word	0x001e847f
 80008cc:	003d08ff 	.word	0x003d08ff
 80008d0:	431bde83 	.word	0x431bde83
 80008d4:	10624dd3 	.word	0x10624dd3

080008d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b088      	sub	sp, #32
 80008dc:	af02      	add	r7, sp, #8
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	607a      	str	r2, [r7, #4]
 80008e2:	461a      	mov	r2, r3
 80008e4:	460b      	mov	r3, r1
 80008e6:	817b      	strh	r3, [r7, #10]
 80008e8:	4613      	mov	r3, r2
 80008ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80008ec:	f7ff fc86 	bl	80001fc <HAL_GetTick>
 80008f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	2b20      	cmp	r3, #32
 80008fc:	f040 80e0 	bne.w	8000ac0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	2319      	movs	r3, #25
 8000906:	2201      	movs	r2, #1
 8000908:	4970      	ldr	r1, [pc, #448]	; (8000acc <HAL_I2C_Master_Transmit+0x1f4>)
 800090a:	68f8      	ldr	r0, [r7, #12]
 800090c:	f000 fd5e 	bl	80013cc <I2C_WaitOnFlagUntilTimeout>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000916:	2302      	movs	r3, #2
 8000918:	e0d3      	b.n	8000ac2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000920:	2b01      	cmp	r3, #1
 8000922:	d101      	bne.n	8000928 <HAL_I2C_Master_Transmit+0x50>
 8000924:	2302      	movs	r3, #2
 8000926:	e0cc      	b.n	8000ac2 <HAL_I2C_Master_Transmit+0x1ea>
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	2201      	movs	r2, #1
 800092c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	2b01      	cmp	r3, #1
 800093c:	d007      	beq.n	800094e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	68fa      	ldr	r2, [r7, #12]
 8000944:	6812      	ldr	r2, [r2, #0]
 8000946:	6812      	ldr	r2, [r2, #0]
 8000948:	f042 0201 	orr.w	r2, r2, #1
 800094c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	6812      	ldr	r2, [r2, #0]
 8000956:	6812      	ldr	r2, [r2, #0]
 8000958:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800095c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	2221      	movs	r2, #33	; 0x21
 8000962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	2210      	movs	r2, #16
 800096a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	2200      	movs	r2, #0
 8000972:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	893a      	ldrh	r2, [r7, #8]
 800097e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000984:	b29a      	uxth	r2, r3
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	4a50      	ldr	r2, [pc, #320]	; (8000ad0 <HAL_I2C_Master_Transmit+0x1f8>)
 800098e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000990:	8979      	ldrh	r1, [r7, #10]
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	6a3a      	ldr	r2, [r7, #32]
 8000996:	68f8      	ldr	r0, [r7, #12]
 8000998:	f000 fbec 	bl	8001174 <I2C_MasterRequestWrite>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	e08d      	b.n	8000ac2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80009a6:	2300      	movs	r3, #0
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	695b      	ldr	r3, [r3, #20]
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80009bc:	e066      	b.n	8000a8c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80009be:	697a      	ldr	r2, [r7, #20]
 80009c0:	6a39      	ldr	r1, [r7, #32]
 80009c2:	68f8      	ldr	r0, [r7, #12]
 80009c4:	f000 fdd8 	bl	8001578 <I2C_WaitOnTXEFlagUntilTimeout>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d00d      	beq.n	80009ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	2b04      	cmp	r3, #4
 80009d4:	d107      	bne.n	80009e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	6812      	ldr	r2, [r2, #0]
 80009de:	6812      	ldr	r2, [r2, #0]
 80009e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80009e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	e06b      	b.n	8000ac2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	68fa      	ldr	r2, [r7, #12]
 80009f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80009f2:	7812      	ldrb	r2, [r2, #0]
 80009f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009fa:	1c5a      	adds	r2, r3, #1
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	3b01      	subs	r3, #1
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a12:	3b01      	subs	r3, #1
 8000a14:	b29a      	uxth	r2, r3
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	695b      	ldr	r3, [r3, #20]
 8000a20:	f003 0304 	and.w	r3, r3, #4
 8000a24:	2b04      	cmp	r3, #4
 8000a26:	d11b      	bne.n	8000a60 <HAL_I2C_Master_Transmit+0x188>
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d017      	beq.n	8000a60 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	68fa      	ldr	r2, [r7, #12]
 8000a36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000a38:	7812      	ldrb	r2, [r2, #0]
 8000a3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a40:	1c5a      	adds	r2, r3, #1
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000a60:	697a      	ldr	r2, [r7, #20]
 8000a62:	6a39      	ldr	r1, [r7, #32]
 8000a64:	68f8      	ldr	r0, [r7, #12]
 8000a66:	f000 fdc8 	bl	80015fa <I2C_WaitOnBTFFlagUntilTimeout>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d00d      	beq.n	8000a8c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	d107      	bne.n	8000a88 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	68fa      	ldr	r2, [r7, #12]
 8000a7e:	6812      	ldr	r2, [r2, #0]
 8000a80:	6812      	ldr	r2, [r2, #0]
 8000a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a86:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	e01a      	b.n	8000ac2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d194      	bne.n	80009be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	68fa      	ldr	r2, [r7, #12]
 8000a9a:	6812      	ldr	r2, [r2, #0]
 8000a9c:	6812      	ldr	r2, [r2, #0]
 8000a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000aa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	2220      	movs	r2, #32
 8000aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000abc:	2300      	movs	r3, #0
 8000abe:	e000      	b.n	8000ac2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8000ac0:	2302      	movs	r3, #2
  }
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3718      	adds	r7, #24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	00100002 	.word	0x00100002
 8000ad0:	ffff0000 	.word	0xffff0000

08000ad4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08c      	sub	sp, #48	; 0x30
 8000ad8:	af02      	add	r7, sp, #8
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	607a      	str	r2, [r7, #4]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	817b      	strh	r3, [r7, #10]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000ae8:	f7ff fb88 	bl	80001fc <HAL_GetTick>
 8000aec:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	2b20      	cmp	r3, #32
 8000af8:	f040 8213 	bne.w	8000f22 <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	2319      	movs	r3, #25
 8000b02:	2201      	movs	r2, #1
 8000b04:	497e      	ldr	r1, [pc, #504]	; (8000d00 <HAL_I2C_Master_Receive+0x22c>)
 8000b06:	68f8      	ldr	r0, [r7, #12]
 8000b08:	f000 fc60 	bl	80013cc <I2C_WaitOnFlagUntilTimeout>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8000b12:	2302      	movs	r3, #2
 8000b14:	e206      	b.n	8000f24 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d101      	bne.n	8000b24 <HAL_I2C_Master_Receive+0x50>
 8000b20:	2302      	movs	r3, #2
 8000b22:	e1ff      	b.n	8000f24 <HAL_I2C_Master_Receive+0x450>
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	2201      	movs	r2, #1
 8000b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d007      	beq.n	8000b4a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	6812      	ldr	r2, [r2, #0]
 8000b42:	6812      	ldr	r2, [r2, #0]
 8000b44:	f042 0201 	orr.w	r2, r2, #1
 8000b48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	6812      	ldr	r2, [r2, #0]
 8000b52:	6812      	ldr	r2, [r2, #0]
 8000b54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	2222      	movs	r2, #34	; 0x22
 8000b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	2210      	movs	r2, #16
 8000b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	893a      	ldrh	r2, [r7, #8]
 8000b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b80:	b29a      	uxth	r2, r3
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	4a5e      	ldr	r2, [pc, #376]	; (8000d04 <HAL_I2C_Master_Receive+0x230>)
 8000b8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000b8c:	8979      	ldrh	r1, [r7, #10]
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b92:	68f8      	ldr	r0, [r7, #12]
 8000b94:	f000 fb64 	bl	8001260 <I2C_MasterRequestRead>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e1c0      	b.n	8000f24 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d113      	bne.n	8000bd2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000baa:	2300      	movs	r3, #0
 8000bac:	623b      	str	r3, [r7, #32]
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	695b      	ldr	r3, [r3, #20]
 8000bb4:	623b      	str	r3, [r7, #32]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	623b      	str	r3, [r7, #32]
 8000bbe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	68fa      	ldr	r2, [r7, #12]
 8000bc6:	6812      	ldr	r2, [r2, #0]
 8000bc8:	6812      	ldr	r2, [r2, #0]
 8000bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	e194      	b.n	8000efc <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d11d      	bne.n	8000c16 <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	6812      	ldr	r2, [r2, #0]
 8000be2:	6812      	ldr	r2, [r2, #0]
 8000be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000be8:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bea:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	695b      	ldr	r3, [r3, #20]
 8000bf6:	61fb      	str	r3, [r7, #28]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	61fb      	str	r3, [r7, #28]
 8000c00:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	6812      	ldr	r2, [r2, #0]
 8000c0a:	6812      	ldr	r2, [r2, #0]
 8000c0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c10:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000c12:	b662      	cpsie	i
 8000c14:	e172      	b.n	8000efc <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	d11d      	bne.n	8000c5a <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	6812      	ldr	r2, [r2, #0]
 8000c26:	6812      	ldr	r2, [r2, #0]
 8000c28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000c2c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000c30:	2300      	movs	r3, #0
 8000c32:	61bb      	str	r3, [r7, #24]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	61bb      	str	r3, [r7, #24]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	61bb      	str	r3, [r7, #24]
 8000c44:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	6812      	ldr	r2, [r2, #0]
 8000c4e:	6812      	ldr	r2, [r2, #0]
 8000c50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c54:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000c56:	b662      	cpsie	i
 8000c58:	e150      	b.n	8000efc <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	6812      	ldr	r2, [r2, #0]
 8000c62:	6812      	ldr	r2, [r2, #0]
 8000c64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000c68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	695b      	ldr	r3, [r3, #20]
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8000c80:	e13c      	b.n	8000efc <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c86:	2b03      	cmp	r3, #3
 8000c88:	f200 80f5 	bhi.w	8000e76 <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d123      	bne.n	8000cdc <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000c98:	68f8      	ldr	r0, [r7, #12]
 8000c9a:	f000 fcef 	bl	800167c <I2C_WaitOnRXNEFlagUntilTimeout>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e13d      	b.n	8000f24 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cac:	68fa      	ldr	r2, [r7, #12]
 8000cae:	6812      	ldr	r2, [r2, #0]
 8000cb0:	6912      	ldr	r2, [r2, #16]
 8000cb2:	b2d2      	uxtb	r2, r2
 8000cb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cba:	1c5a      	adds	r2, r3, #1
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8000cda:	e10f      	b.n	8000efc <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d150      	bne.n	8000d86 <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce6:	9300      	str	r3, [sp, #0]
 8000ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cea:	2200      	movs	r2, #0
 8000cec:	4906      	ldr	r1, [pc, #24]	; (8000d08 <HAL_I2C_Master_Receive+0x234>)
 8000cee:	68f8      	ldr	r0, [r7, #12]
 8000cf0:	f000 fb6c 	bl	80013cc <I2C_WaitOnFlagUntilTimeout>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d008      	beq.n	8000d0c <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e112      	b.n	8000f24 <HAL_I2C_Master_Receive+0x450>
 8000cfe:	bf00      	nop
 8000d00:	00100002 	.word	0x00100002
 8000d04:	ffff0000 	.word	0xffff0000
 8000d08:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8000d0c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	6812      	ldr	r2, [r2, #0]
 8000d16:	6812      	ldr	r2, [r2, #0]
 8000d18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d1c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	6812      	ldr	r2, [r2, #0]
 8000d26:	6912      	ldr	r2, [r2, #16]
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d30:	1c5a      	adds	r2, r3, #1
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	b29a      	uxth	r2, r3
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8000d50:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	6812      	ldr	r2, [r2, #0]
 8000d5a:	6912      	ldr	r2, [r2, #16]
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d64:	1c5a      	adds	r2, r3, #1
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8000d84:	e0ba      	b.n	8000efc <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4967      	ldr	r1, [pc, #412]	; (8000f2c <HAL_I2C_Master_Receive+0x458>)
 8000d90:	68f8      	ldr	r0, [r7, #12]
 8000d92:	f000 fb1b 	bl	80013cc <I2C_WaitOnFlagUntilTimeout>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e0c1      	b.n	8000f24 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	68fa      	ldr	r2, [r7, #12]
 8000da6:	6812      	ldr	r2, [r2, #0]
 8000da8:	6812      	ldr	r2, [r2, #0]
 8000daa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000dae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000db0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	6812      	ldr	r2, [r2, #0]
 8000dba:	6912      	ldr	r2, [r2, #16]
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc4:	1c5a      	adds	r2, r3, #1
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	b29a      	uxth	r2, r3
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dea:	2200      	movs	r2, #0
 8000dec:	494f      	ldr	r1, [pc, #316]	; (8000f2c <HAL_I2C_Master_Receive+0x458>)
 8000dee:	68f8      	ldr	r0, [r7, #12]
 8000df0:	f000 faec 	bl	80013cc <I2C_WaitOnFlagUntilTimeout>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e092      	b.n	8000f24 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	6812      	ldr	r2, [r2, #0]
 8000e06:	6812      	ldr	r2, [r2, #0]
 8000e08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e0c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	6812      	ldr	r2, [r2, #0]
 8000e16:	6912      	ldr	r2, [r2, #16]
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e20:	1c5a      	adds	r2, r3, #1
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	b29a      	uxth	r2, r3
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8000e40:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	6812      	ldr	r2, [r2, #0]
 8000e4a:	6912      	ldr	r2, [r2, #16]
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e54:	1c5a      	adds	r2, r3, #1
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8000e74:	e042      	b.n	8000efc <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000e7a:	68f8      	ldr	r0, [r7, #12]
 8000e7c:	f000 fbfe 	bl	800167c <I2C_WaitOnRXNEFlagUntilTimeout>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e04c      	b.n	8000f24 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	6812      	ldr	r2, [r2, #0]
 8000e92:	6912      	ldr	r2, [r2, #16]
 8000e94:	b2d2      	uxtb	r2, r2
 8000e96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9c:	1c5a      	adds	r2, r3, #1
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	f003 0304 	and.w	r3, r3, #4
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	d118      	bne.n	8000efc <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	6812      	ldr	r2, [r2, #0]
 8000ed2:	6912      	ldr	r2, [r2, #16]
 8000ed4:	b2d2      	uxtb	r2, r2
 8000ed6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000edc:	1c5a      	adds	r2, r3, #1
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	f47f aebe 	bne.w	8000c82 <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	2220      	movs	r2, #32
 8000f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	e000      	b.n	8000f24 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 8000f22:	2302      	movs	r3, #2
  }
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3728      	adds	r7, #40	; 0x28
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	00010004 	.word	0x00010004

08000f30 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	; 0x28
 8000f34:	af02      	add	r7, sp, #8
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	607a      	str	r2, [r7, #4]
 8000f3a:	603b      	str	r3, [r7, #0]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8000f40:	f7ff f95c 	bl	80001fc <HAL_GetTick>
 8000f44:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8000f46:	2301      	movs	r3, #1
 8000f48:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b20      	cmp	r3, #32
 8000f54:	f040 8104 	bne.w	8001160 <HAL_I2C_IsDeviceReady+0x230>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2319      	movs	r3, #25
 8000f5e:	2201      	movs	r2, #1
 8000f60:	4982      	ldr	r1, [pc, #520]	; (800116c <HAL_I2C_IsDeviceReady+0x23c>)
 8000f62:	68f8      	ldr	r0, [r7, #12]
 8000f64:	f000 fa32 	bl	80013cc <I2C_WaitOnFlagUntilTimeout>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	e0f7      	b.n	8001162 <HAL_I2C_IsDeviceReady+0x232>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d101      	bne.n	8000f80 <HAL_I2C_IsDeviceReady+0x50>
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	e0f0      	b.n	8001162 <HAL_I2C_IsDeviceReady+0x232>
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2201      	movs	r2, #1
 8000f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d007      	beq.n	8000fa6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	6812      	ldr	r2, [r2, #0]
 8000f9e:	6812      	ldr	r2, [r2, #0]
 8000fa0:	f042 0201 	orr.w	r2, r2, #1
 8000fa4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	6812      	ldr	r2, [r2, #0]
 8000fae:	6812      	ldr	r2, [r2, #0]
 8000fb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2224      	movs	r2, #36	; 0x24
 8000fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4a6a      	ldr	r2, [pc, #424]	; (8001170 <HAL_I2C_IsDeviceReady+0x240>)
 8000fc8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	6812      	ldr	r2, [r2, #0]
 8000fd2:	6812      	ldr	r2, [r2, #0]
 8000fd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fd8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000fe6:	68f8      	ldr	r0, [r7, #12]
 8000fe8:	f000 f9f0 	bl	80013cc <I2C_WaitOnFlagUntilTimeout>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e0b5      	b.n	8001162 <HAL_I2C_IsDeviceReady+0x232>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	897a      	ldrh	r2, [r7, #10]
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001002:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001004:	f7ff f8fa 	bl	80001fc <HAL_GetTick>
 8001008:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	2b02      	cmp	r3, #2
 8001016:	bf0c      	ite	eq
 8001018:	2301      	moveq	r3, #1
 800101a:	2300      	movne	r3, #0
 800101c:	b2db      	uxtb	r3, r3
 800101e:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800102a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800102e:	bf0c      	ite	eq
 8001030:	2301      	moveq	r3, #1
 8001032:	2300      	movne	r3, #0
 8001034:	b2db      	uxtb	r3, r3
 8001036:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001038:	e025      	b.n	8001086 <HAL_I2C_IsDeviceReady+0x156>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800103a:	f7ff f8df 	bl	80001fc <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	1ad2      	subs	r2, r2, r3
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	429a      	cmp	r2, r3
 8001048:	d802      	bhi.n	8001050 <HAL_I2C_IsDeviceReady+0x120>
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d103      	bne.n	8001058 <HAL_I2C_IsDeviceReady+0x128>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	22a0      	movs	r2, #160	; 0xa0
 8001054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	2b02      	cmp	r3, #2
 8001064:	bf0c      	ite	eq
 8001066:	2301      	moveq	r3, #1
 8001068:	2300      	movne	r3, #0
 800106a:	b2db      	uxtb	r3, r3
 800106c:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800107c:	bf0c      	ite	eq
 800107e:	2301      	moveq	r3, #1
 8001080:	2300      	movne	r3, #0
 8001082:	b2db      	uxtb	r3, r3
 8001084:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2ba0      	cmp	r3, #160	; 0xa0
 8001090:	d005      	beq.n	800109e <HAL_I2C_IsDeviceReady+0x16e>
 8001092:	7dfb      	ldrb	r3, [r7, #23]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d102      	bne.n	800109e <HAL_I2C_IsDeviceReady+0x16e>
 8001098:	7dbb      	ldrb	r3, [r7, #22]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d0cd      	beq.n	800103a <HAL_I2C_IsDeviceReady+0x10a>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2220      	movs	r2, #32
 80010a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	695b      	ldr	r3, [r3, #20]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d129      	bne.n	8001108 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	68fa      	ldr	r2, [r7, #12]
 80010ba:	6812      	ldr	r2, [r2, #0]
 80010bc:	6812      	ldr	r2, [r2, #0]
 80010be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010c2:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010c4:	2300      	movs	r3, #0
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2319      	movs	r3, #25
 80010e0:	2201      	movs	r2, #1
 80010e2:	4922      	ldr	r1, [pc, #136]	; (800116c <HAL_I2C_IsDeviceReady+0x23c>)
 80010e4:	68f8      	ldr	r0, [r7, #12]
 80010e6:	f000 f971 	bl	80013cc <I2C_WaitOnFlagUntilTimeout>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <HAL_I2C_IsDeviceReady+0x1c4>
        {
          return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e036      	b.n	8001162 <HAL_I2C_IsDeviceReady+0x232>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2220      	movs	r2, #32
 80010f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	e02c      	b.n	8001162 <HAL_I2C_IsDeviceReady+0x232>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	6812      	ldr	r2, [r2, #0]
 8001110:	6812      	ldr	r2, [r2, #0]
 8001112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001116:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001120:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2319      	movs	r3, #25
 8001128:	2201      	movs	r2, #1
 800112a:	4910      	ldr	r1, [pc, #64]	; (800116c <HAL_I2C_IsDeviceReady+0x23c>)
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	f000 f94d 	bl	80013cc <I2C_WaitOnFlagUntilTimeout>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <HAL_I2C_IsDeviceReady+0x20c>
        {
          return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e012      	b.n	8001162 <HAL_I2C_IsDeviceReady+0x232>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	3301      	adds	r3, #1
 8001140:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	429a      	cmp	r2, r3
 8001148:	f4ff af3f 	bcc.w	8000fca <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2220      	movs	r2, #32
 8001150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2200      	movs	r2, #0
 8001158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e000      	b.n	8001162 <HAL_I2C_IsDeviceReady+0x232>
  }
  else
  {
    return HAL_BUSY;
 8001160:	2302      	movs	r3, #2
  }
}
 8001162:	4618      	mov	r0, r3
 8001164:	3720      	adds	r7, #32
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	00100002 	.word	0x00100002
 8001170:	ffff0000 	.word	0xffff0000

08001174 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af02      	add	r7, sp, #8
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	607a      	str	r2, [r7, #4]
 800117e:	603b      	str	r3, [r7, #0]
 8001180:	460b      	mov	r3, r1
 8001182:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001188:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	2b08      	cmp	r3, #8
 800118e:	d006      	beq.n	800119e <I2C_MasterRequestWrite+0x2a>
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d003      	beq.n	800119e <I2C_MasterRequestWrite+0x2a>
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800119c:	d108      	bne.n	80011b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	6812      	ldr	r2, [r2, #0]
 80011a6:	6812      	ldr	r2, [r2, #0]
 80011a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	e00b      	b.n	80011c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b4:	2b12      	cmp	r3, #18
 80011b6:	d107      	bne.n	80011c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	68fa      	ldr	r2, [r7, #12]
 80011be:	6812      	ldr	r2, [r2, #0]
 80011c0:	6812      	ldr	r2, [r2, #0]
 80011c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80011d4:	68f8      	ldr	r0, [r7, #12]
 80011d6:	f000 f8f9 	bl	80013cc <I2C_WaitOnFlagUntilTimeout>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e034      	b.n	800124e <I2C_MasterRequestWrite+0xda>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80011ec:	d107      	bne.n	80011fe <I2C_MasterRequestWrite+0x8a>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	897a      	ldrh	r2, [r7, #10]
 80011f4:	b2d2      	uxtb	r2, r2
 80011f6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80011fa:	611a      	str	r2, [r3, #16]
 80011fc:	e01b      	b.n	8001236 <I2C_MasterRequestWrite+0xc2>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	897a      	ldrh	r2, [r7, #10]
 8001204:	11d2      	asrs	r2, r2, #7
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	f002 0206 	and.w	r2, r2, #6
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	f062 020f 	orn	r2, r2, #15
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	490f      	ldr	r1, [pc, #60]	; (8001258 <I2C_MasterRequestWrite+0xe4>)
 800121c:	68f8      	ldr	r0, [r7, #12]
 800121e:	f000 f92c 	bl	800147a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <I2C_MasterRequestWrite+0xb8>
    {
      return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e010      	b.n	800124e <I2C_MasterRequestWrite+0xda>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	897a      	ldrh	r2, [r7, #10]
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	4908      	ldr	r1, [pc, #32]	; (800125c <I2C_MasterRequestWrite+0xe8>)
 800123c:	68f8      	ldr	r0, [r7, #12]
 800123e:	f000 f91c 	bl	800147a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <I2C_MasterRequestWrite+0xd8>
  {
    return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e000      	b.n	800124e <I2C_MasterRequestWrite+0xda>
  }

  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	00010008 	.word	0x00010008
 800125c:	00010002 	.word	0x00010002

08001260 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af02      	add	r7, sp, #8
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	460b      	mov	r3, r1
 800126e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001274:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	6812      	ldr	r2, [r2, #0]
 800127e:	6812      	ldr	r2, [r2, #0]
 8001280:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001284:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	2b08      	cmp	r3, #8
 800128a:	d006      	beq.n	800129a <I2C_MasterRequestRead+0x3a>
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d003      	beq.n	800129a <I2C_MasterRequestRead+0x3a>
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001298:	d108      	bne.n	80012ac <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	6812      	ldr	r2, [r2, #0]
 80012a2:	6812      	ldr	r2, [r2, #0]
 80012a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	e00b      	b.n	80012c4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b0:	2b11      	cmp	r3, #17
 80012b2:	d107      	bne.n	80012c4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	68fa      	ldr	r2, [r7, #12]
 80012ba:	6812      	ldr	r2, [r2, #0]
 80012bc:	6812      	ldr	r2, [r2, #0]
 80012be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80012d0:	68f8      	ldr	r0, [r7, #12]
 80012d2:	f000 f87b 	bl	80013cc <I2C_WaitOnFlagUntilTimeout>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e06d      	b.n	80013bc <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	691b      	ldr	r3, [r3, #16]
 80012e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80012e8:	d108      	bne.n	80012fc <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	897a      	ldrh	r2, [r7, #10]
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	f042 0201 	orr.w	r2, r2, #1
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	611a      	str	r2, [r3, #16]
 80012fa:	e053      	b.n	80013a4 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	897a      	ldrh	r2, [r7, #10]
 8001302:	11d2      	asrs	r2, r2, #7
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	f002 0206 	and.w	r2, r2, #6
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	f062 020f 	orn	r2, r2, #15
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	492a      	ldr	r1, [pc, #168]	; (80013c4 <I2C_MasterRequestRead+0x164>)
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f000 f8ad 	bl	800147a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e048      	b.n	80013bc <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	897a      	ldrh	r2, [r7, #10]
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	4923      	ldr	r1, [pc, #140]	; (80013c8 <I2C_MasterRequestRead+0x168>)
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	f000 f89d 	bl	800147a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e038      	b.n	80013bc <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	6812      	ldr	r2, [r2, #0]
 8001368:	6812      	ldr	r2, [r2, #0]
 800136a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800136e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	f000 f825 	bl	80013cc <I2C_WaitOnFlagUntilTimeout>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e017      	b.n	80013bc <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	897a      	ldrh	r2, [r7, #10]
 8001392:	11d2      	asrs	r2, r2, #7
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	f002 0206 	and.w	r2, r2, #6
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	f062 020e 	orn	r2, r2, #14
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	4907      	ldr	r1, [pc, #28]	; (80013c8 <I2C_MasterRequestRead+0x168>)
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	f000 f865 	bl	800147a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e000      	b.n	80013bc <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	00010008 	.word	0x00010008
 80013c8:	00010002 	.word	0x00010002

080013cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	4613      	mov	r3, r2
 80013da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013dc:	e025      	b.n	800142a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e4:	d021      	beq.n	800142a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013e6:	f7fe ff09 	bl	80001fc <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	1ad2      	subs	r2, r2, r3
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d802      	bhi.n	80013fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d116      	bne.n	800142a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2200      	movs	r2, #0
 8001400:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2220      	movs	r2, #32
 8001406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f043 0220 	orr.w	r2, r3, #32
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e023      	b.n	8001472 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	0c1b      	lsrs	r3, r3, #16
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b01      	cmp	r3, #1
 8001432:	d10d      	bne.n	8001450 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	43da      	mvns	r2, r3
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	4013      	ands	r3, r2
 8001440:	b29b      	uxth	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	bf0c      	ite	eq
 8001446:	2301      	moveq	r3, #1
 8001448:	2300      	movne	r3, #0
 800144a:	b2db      	uxtb	r3, r3
 800144c:	461a      	mov	r2, r3
 800144e:	e00c      	b.n	800146a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	43da      	mvns	r2, r3
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	4013      	ands	r3, r2
 800145c:	b29b      	uxth	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	bf0c      	ite	eq
 8001462:	2301      	moveq	r3, #1
 8001464:	2300      	movne	r3, #0
 8001466:	b2db      	uxtb	r3, r3
 8001468:	461a      	mov	r2, r3
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	429a      	cmp	r2, r3
 800146e:	d0b6      	beq.n	80013de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b084      	sub	sp, #16
 800147e:	af00      	add	r7, sp, #0
 8001480:	60f8      	str	r0, [r7, #12]
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
 8001486:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001488:	e051      	b.n	800152e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	695b      	ldr	r3, [r3, #20]
 8001490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001498:	d123      	bne.n	80014e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	6812      	ldr	r2, [r2, #0]
 80014a2:	6812      	ldr	r2, [r2, #0]
 80014a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80014b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2200      	movs	r2, #0
 80014b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2220      	movs	r2, #32
 80014be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f043 0204 	orr.w	r2, r3, #4
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e046      	b.n	8001570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e8:	d021      	beq.n	800152e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014ea:	f7fe fe87 	bl	80001fc <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	1ad2      	subs	r2, r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d802      	bhi.n	8001500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d116      	bne.n	800152e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2200      	movs	r2, #0
 8001504:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2220      	movs	r2, #32
 800150a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f043 0220 	orr.w	r2, r3, #32
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e020      	b.n	8001570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	0c1b      	lsrs	r3, r3, #16
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b01      	cmp	r3, #1
 8001536:	d10c      	bne.n	8001552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	43da      	mvns	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	4013      	ands	r3, r2
 8001544:	b29b      	uxth	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	bf14      	ite	ne
 800154a:	2301      	movne	r3, #1
 800154c:	2300      	moveq	r3, #0
 800154e:	b2db      	uxtb	r3, r3
 8001550:	e00b      	b.n	800156a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	43da      	mvns	r2, r3
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	4013      	ands	r3, r2
 800155e:	b29b      	uxth	r3, r3
 8001560:	2b00      	cmp	r3, #0
 8001562:	bf14      	ite	ne
 8001564:	2301      	movne	r3, #1
 8001566:	2300      	moveq	r3, #0
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d18d      	bne.n	800148a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001584:	e02d      	b.n	80015e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f000 f8ce 	bl	8001728 <I2C_IsAcknowledgeFailed>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e02d      	b.n	80015f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800159c:	d021      	beq.n	80015e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800159e:	f7fe fe2d 	bl	80001fc <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	1ad2      	subs	r2, r2, r3
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d802      	bhi.n	80015b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d116      	bne.n	80015e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2200      	movs	r2, #0
 80015b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2220      	movs	r2, #32
 80015be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f043 0220 	orr.w	r2, r3, #32
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e007      	b.n	80015f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ec:	2b80      	cmp	r3, #128	; 0x80
 80015ee:	d1ca      	bne.n	8001586 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b084      	sub	sp, #16
 80015fe:	af00      	add	r7, sp, #0
 8001600:	60f8      	str	r0, [r7, #12]
 8001602:	60b9      	str	r1, [r7, #8]
 8001604:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001606:	e02d      	b.n	8001664 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f000 f88d 	bl	8001728 <I2C_IsAcknowledgeFailed>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e02d      	b.n	8001674 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800161e:	d021      	beq.n	8001664 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001620:	f7fe fdec 	bl	80001fc <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	1ad2      	subs	r2, r2, r3
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	429a      	cmp	r2, r3
 800162e:	d802      	bhi.n	8001636 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d116      	bne.n	8001664 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2200      	movs	r2, #0
 800163a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2220      	movs	r2, #32
 8001640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	f043 0220 	orr.w	r2, r3, #32
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2200      	movs	r2, #0
 800165c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e007      	b.n	8001674 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	2b04      	cmp	r3, #4
 8001670:	d1ca      	bne.n	8001608 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001688:	e042      	b.n	8001710 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	f003 0310 	and.w	r3, r3, #16
 8001694:	2b10      	cmp	r3, #16
 8001696:	d119      	bne.n	80016cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f06f 0210 	mvn.w	r2, #16
 80016a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2200      	movs	r2, #0
 80016a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2220      	movs	r2, #32
 80016ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e029      	b.n	8001720 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016cc:	f7fe fd96 	bl	80001fc <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	1ad2      	subs	r2, r2, r3
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d802      	bhi.n	80016e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d116      	bne.n	8001710 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2200      	movs	r2, #0
 80016e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2220      	movs	r2, #32
 80016ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	f043 0220 	orr.w	r2, r3, #32
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e007      	b.n	8001720 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800171a:	2b40      	cmp	r3, #64	; 0x40
 800171c:	d1b5      	bne.n	800168a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800173a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800173e:	d11b      	bne.n	8001778 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001748:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2220      	movs	r2, #32
 8001754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	f043 0204 	orr.w	r2, r3, #4
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e000      	b.n	800177a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e26c      	b.n	8001c70 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f000 8087 	beq.w	80018b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017a4:	4b92      	ldr	r3, [pc, #584]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 030c 	and.w	r3, r3, #12
 80017ac:	2b04      	cmp	r3, #4
 80017ae:	d00c      	beq.n	80017ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017b0:	4b8f      	ldr	r3, [pc, #572]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 030c 	and.w	r3, r3, #12
 80017b8:	2b08      	cmp	r3, #8
 80017ba:	d112      	bne.n	80017e2 <HAL_RCC_OscConfig+0x5e>
 80017bc:	4b8c      	ldr	r3, [pc, #560]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017c8:	d10b      	bne.n	80017e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ca:	4b89      	ldr	r3, [pc, #548]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d06c      	beq.n	80018b0 <HAL_RCC_OscConfig+0x12c>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d168      	bne.n	80018b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e246      	b.n	8001c70 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ea:	d106      	bne.n	80017fa <HAL_RCC_OscConfig+0x76>
 80017ec:	4a80      	ldr	r2, [pc, #512]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80017ee:	4b80      	ldr	r3, [pc, #512]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	e02e      	b.n	8001858 <HAL_RCC_OscConfig+0xd4>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10c      	bne.n	800181c <HAL_RCC_OscConfig+0x98>
 8001802:	4a7b      	ldr	r2, [pc, #492]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001804:	4b7a      	ldr	r3, [pc, #488]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	4a78      	ldr	r2, [pc, #480]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001810:	4b77      	ldr	r3, [pc, #476]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	e01d      	b.n	8001858 <HAL_RCC_OscConfig+0xd4>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001824:	d10c      	bne.n	8001840 <HAL_RCC_OscConfig+0xbc>
 8001826:	4a72      	ldr	r2, [pc, #456]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001828:	4b71      	ldr	r3, [pc, #452]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	4a6f      	ldr	r2, [pc, #444]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001834:	4b6e      	ldr	r3, [pc, #440]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	e00b      	b.n	8001858 <HAL_RCC_OscConfig+0xd4>
 8001840:	4a6b      	ldr	r2, [pc, #428]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001842:	4b6b      	ldr	r3, [pc, #428]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800184a:	6013      	str	r3, [r2, #0]
 800184c:	4a68      	ldr	r2, [pc, #416]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 800184e:	4b68      	ldr	r3, [pc, #416]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001856:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d013      	beq.n	8001888 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7fe fccc 	bl	80001fc <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001868:	f7fe fcc8 	bl	80001fc <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b64      	cmp	r3, #100	; 0x64
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e1fa      	b.n	8001c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187a:	4b5d      	ldr	r3, [pc, #372]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f0      	beq.n	8001868 <HAL_RCC_OscConfig+0xe4>
 8001886:	e014      	b.n	80018b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001888:	f7fe fcb8 	bl	80001fc <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001890:	f7fe fcb4 	bl	80001fc <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b64      	cmp	r3, #100	; 0x64
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e1e6      	b.n	8001c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a2:	4b53      	ldr	r3, [pc, #332]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f0      	bne.n	8001890 <HAL_RCC_OscConfig+0x10c>
 80018ae:	e000      	b.n	80018b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d063      	beq.n	8001986 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018be:	4b4c      	ldr	r3, [pc, #304]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 030c 	and.w	r3, r3, #12
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00b      	beq.n	80018e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018ca:	4b49      	ldr	r3, [pc, #292]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 030c 	and.w	r3, r3, #12
 80018d2:	2b08      	cmp	r3, #8
 80018d4:	d11c      	bne.n	8001910 <HAL_RCC_OscConfig+0x18c>
 80018d6:	4b46      	ldr	r3, [pc, #280]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d116      	bne.n	8001910 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e2:	4b43      	ldr	r3, [pc, #268]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d005      	beq.n	80018fa <HAL_RCC_OscConfig+0x176>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d001      	beq.n	80018fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e1ba      	b.n	8001c70 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fa:	493d      	ldr	r1, [pc, #244]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	4b3c      	ldr	r3, [pc, #240]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	4313      	orrs	r3, r2
 800190c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800190e:	e03a      	b.n	8001986 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d020      	beq.n	800195a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001918:	4b36      	ldr	r3, [pc, #216]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 800191a:	2201      	movs	r2, #1
 800191c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191e:	f7fe fc6d 	bl	80001fc <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001926:	f7fe fc69 	bl	80001fc <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e19b      	b.n	8001c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001938:	4b2d      	ldr	r3, [pc, #180]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0f0      	beq.n	8001926 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001944:	492a      	ldr	r1, [pc, #168]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001946:	4b2a      	ldr	r3, [pc, #168]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	4313      	orrs	r3, r2
 8001956:	600b      	str	r3, [r1, #0]
 8001958:	e015      	b.n	8001986 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800195a:	4b26      	ldr	r3, [pc, #152]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001960:	f7fe fc4c 	bl	80001fc <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001968:	f7fe fc48 	bl	80001fc <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e17a      	b.n	8001c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800197a:	4b1d      	ldr	r3, [pc, #116]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	2b00      	cmp	r3, #0
 8001990:	d03a      	beq.n	8001a08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d019      	beq.n	80019ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800199a:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <HAL_RCC_OscConfig+0x274>)
 800199c:	2201      	movs	r2, #1
 800199e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a0:	f7fe fc2c 	bl	80001fc <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a8:	f7fe fc28 	bl	80001fc <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e15a      	b.n	8001c70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ba:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d0f0      	beq.n	80019a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019c6:	2001      	movs	r0, #1
 80019c8:	f000 fada 	bl	8001f80 <RCC_Delay>
 80019cc:	e01c      	b.n	8001a08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ce:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <HAL_RCC_OscConfig+0x274>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d4:	f7fe fc12 	bl	80001fc <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019da:	e00f      	b.n	80019fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019dc:	f7fe fc0e 	bl	80001fc <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d908      	bls.n	80019fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e140      	b.n	8001c70 <HAL_RCC_OscConfig+0x4ec>
 80019ee:	bf00      	nop
 80019f0:	40021000 	.word	0x40021000
 80019f4:	42420000 	.word	0x42420000
 80019f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019fc:	4b9e      	ldr	r3, [pc, #632]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1e9      	bne.n	80019dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 80a6 	beq.w	8001b62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a16:	2300      	movs	r3, #0
 8001a18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a1a:	4b97      	ldr	r3, [pc, #604]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10d      	bne.n	8001a42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a26:	4a94      	ldr	r2, [pc, #592]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001a28:	4b93      	ldr	r3, [pc, #588]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001a2a:	69db      	ldr	r3, [r3, #28]
 8001a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a30:	61d3      	str	r3, [r2, #28]
 8001a32:	4b91      	ldr	r3, [pc, #580]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a42:	4b8e      	ldr	r3, [pc, #568]	; (8001c7c <HAL_RCC_OscConfig+0x4f8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d118      	bne.n	8001a80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a4e:	4a8b      	ldr	r2, [pc, #556]	; (8001c7c <HAL_RCC_OscConfig+0x4f8>)
 8001a50:	4b8a      	ldr	r3, [pc, #552]	; (8001c7c <HAL_RCC_OscConfig+0x4f8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a5a:	f7fe fbcf 	bl	80001fc <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a62:	f7fe fbcb 	bl	80001fc <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b64      	cmp	r3, #100	; 0x64
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e0fd      	b.n	8001c70 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a74:	4b81      	ldr	r3, [pc, #516]	; (8001c7c <HAL_RCC_OscConfig+0x4f8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d106      	bne.n	8001a96 <HAL_RCC_OscConfig+0x312>
 8001a88:	4a7b      	ldr	r2, [pc, #492]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001a8a:	4b7b      	ldr	r3, [pc, #492]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	6213      	str	r3, [r2, #32]
 8001a94:	e02d      	b.n	8001af2 <HAL_RCC_OscConfig+0x36e>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x334>
 8001a9e:	4a76      	ldr	r2, [pc, #472]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001aa0:	4b75      	ldr	r3, [pc, #468]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	f023 0301 	bic.w	r3, r3, #1
 8001aa8:	6213      	str	r3, [r2, #32]
 8001aaa:	4a73      	ldr	r2, [pc, #460]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001aac:	4b72      	ldr	r3, [pc, #456]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	f023 0304 	bic.w	r3, r3, #4
 8001ab4:	6213      	str	r3, [r2, #32]
 8001ab6:	e01c      	b.n	8001af2 <HAL_RCC_OscConfig+0x36e>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	2b05      	cmp	r3, #5
 8001abe:	d10c      	bne.n	8001ada <HAL_RCC_OscConfig+0x356>
 8001ac0:	4a6d      	ldr	r2, [pc, #436]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001ac2:	4b6d      	ldr	r3, [pc, #436]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	f043 0304 	orr.w	r3, r3, #4
 8001aca:	6213      	str	r3, [r2, #32]
 8001acc:	4a6a      	ldr	r2, [pc, #424]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001ace:	4b6a      	ldr	r3, [pc, #424]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	6213      	str	r3, [r2, #32]
 8001ad8:	e00b      	b.n	8001af2 <HAL_RCC_OscConfig+0x36e>
 8001ada:	4a67      	ldr	r2, [pc, #412]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001adc:	4b66      	ldr	r3, [pc, #408]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	f023 0301 	bic.w	r3, r3, #1
 8001ae4:	6213      	str	r3, [r2, #32]
 8001ae6:	4a64      	ldr	r2, [pc, #400]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001ae8:	4b63      	ldr	r3, [pc, #396]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	f023 0304 	bic.w	r3, r3, #4
 8001af0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d015      	beq.n	8001b26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001afa:	f7fe fb7f 	bl	80001fc <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b00:	e00a      	b.n	8001b18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b02:	f7fe fb7b 	bl	80001fc <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e0ab      	b.n	8001c70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b18:	4b57      	ldr	r3, [pc, #348]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0ee      	beq.n	8001b02 <HAL_RCC_OscConfig+0x37e>
 8001b24:	e014      	b.n	8001b50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b26:	f7fe fb69 	bl	80001fc <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b2c:	e00a      	b.n	8001b44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b2e:	f7fe fb65 	bl	80001fc <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e095      	b.n	8001c70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b44:	4b4c      	ldr	r3, [pc, #304]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1ee      	bne.n	8001b2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b50:	7dfb      	ldrb	r3, [r7, #23]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d105      	bne.n	8001b62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b56:	4a48      	ldr	r2, [pc, #288]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001b58:	4b47      	ldr	r3, [pc, #284]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001b5a:	69db      	ldr	r3, [r3, #28]
 8001b5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 8081 	beq.w	8001c6e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b6c:	4b42      	ldr	r3, [pc, #264]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 030c 	and.w	r3, r3, #12
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d061      	beq.n	8001c3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d146      	bne.n	8001c0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b80:	4b3f      	ldr	r3, [pc, #252]	; (8001c80 <HAL_RCC_OscConfig+0x4fc>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b86:	f7fe fb39 	bl	80001fc <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8e:	f7fe fb35 	bl	80001fc <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e067      	b.n	8001c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba0:	4b35      	ldr	r3, [pc, #212]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1f0      	bne.n	8001b8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb4:	d108      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bb6:	4930      	ldr	r1, [pc, #192]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001bb8:	4b2f      	ldr	r3, [pc, #188]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bc8:	482b      	ldr	r0, [pc, #172]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001bca:	4b2b      	ldr	r3, [pc, #172]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a19      	ldr	r1, [r3, #32]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bda:	430b      	orrs	r3, r1
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001be0:	4b27      	ldr	r3, [pc, #156]	; (8001c80 <HAL_RCC_OscConfig+0x4fc>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be6:	f7fe fb09 	bl	80001fc <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bee:	f7fe fb05 	bl	80001fc <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e037      	b.n	8001c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c00:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0f0      	beq.n	8001bee <HAL_RCC_OscConfig+0x46a>
 8001c0c:	e02f      	b.n	8001c6e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0e:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <HAL_RCC_OscConfig+0x4fc>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c14:	f7fe faf2 	bl	80001fc <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7fe faee 	bl	80001fc <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e020      	b.n	8001c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c2e:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x498>
 8001c3a:	e018      	b.n	8001c6e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d101      	bne.n	8001c48 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e013      	b.n	8001c70 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d106      	bne.n	8001c6a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d001      	beq.n	8001c6e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40007000 	.word	0x40007000
 8001c80:	42420060 	.word	0x42420060

08001c84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e0d0      	b.n	8001e3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c98:	4b6a      	ldr	r3, [pc, #424]	; (8001e44 <HAL_RCC_ClockConfig+0x1c0>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0207 	and.w	r2, r3, #7
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d210      	bcs.n	8001cc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca6:	4967      	ldr	r1, [pc, #412]	; (8001e44 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca8:	4b66      	ldr	r3, [pc, #408]	; (8001e44 <HAL_RCC_ClockConfig+0x1c0>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f023 0207 	bic.w	r2, r3, #7
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb6:	4b63      	ldr	r3, [pc, #396]	; (8001e44 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0207 	and.w	r2, r3, #7
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d001      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e0b8      	b.n	8001e3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d020      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d005      	beq.n	8001cec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ce0:	4a59      	ldr	r2, [pc, #356]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce2:	4b59      	ldr	r3, [pc, #356]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0308 	and.w	r3, r3, #8
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d005      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cf8:	4a53      	ldr	r2, [pc, #332]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfa:	4b53      	ldr	r3, [pc, #332]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d04:	4950      	ldr	r1, [pc, #320]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d06:	4b50      	ldr	r3, [pc, #320]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d040      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d107      	bne.n	8001d3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2a:	4b47      	ldr	r3, [pc, #284]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d115      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e07f      	b.n	8001e3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d107      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d42:	4b41      	ldr	r3, [pc, #260]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d109      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e073      	b.n	8001e3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d52:	4b3d      	ldr	r3, [pc, #244]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e06b      	b.n	8001e3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d62:	4939      	ldr	r1, [pc, #228]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d64:	4b38      	ldr	r3, [pc, #224]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f023 0203 	bic.w	r2, r3, #3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d74:	f7fe fa42 	bl	80001fc <HAL_GetTick>
 8001d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7a:	e00a      	b.n	8001d92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d7c:	f7fe fa3e 	bl	80001fc <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e053      	b.n	8001e3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d92:	4b2d      	ldr	r3, [pc, #180]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 020c 	and.w	r2, r3, #12
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d1eb      	bne.n	8001d7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001da4:	4b27      	ldr	r3, [pc, #156]	; (8001e44 <HAL_RCC_ClockConfig+0x1c0>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0207 	and.w	r2, r3, #7
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d910      	bls.n	8001dd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db2:	4924      	ldr	r1, [pc, #144]	; (8001e44 <HAL_RCC_ClockConfig+0x1c0>)
 8001db4:	4b23      	ldr	r3, [pc, #140]	; (8001e44 <HAL_RCC_ClockConfig+0x1c0>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f023 0207 	bic.w	r2, r3, #7
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc2:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0207 	and.w	r2, r3, #7
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d001      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e032      	b.n	8001e3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d008      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de0:	4919      	ldr	r1, [pc, #100]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001de2:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d009      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dfe:	4912      	ldr	r1, [pc, #72]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001e00:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e12:	f000 f821 	bl	8001e58 <HAL_RCC_GetSysClockFreq>
 8001e16:	4601      	mov	r1, r0
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	091b      	lsrs	r3, r3, #4
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001e24:	5cd3      	ldrb	r3, [r2, r3]
 8001e26:	fa21 f303 	lsr.w	r3, r1, r3
 8001e2a:	4a09      	ldr	r2, [pc, #36]	; (8001e50 <HAL_RCC_ClockConfig+0x1cc>)
 8001e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e2e:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <HAL_RCC_ClockConfig+0x1d0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe f9a0 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40022000 	.word	0x40022000
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	08002bb0 	.word	0x08002bb0
 8001e50:	20000008 	.word	0x20000008
 8001e54:	20000000 	.word	0x20000000

08001e58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e58:	b490      	push	{r4, r7}
 8001e5a:	b08a      	sub	sp, #40	; 0x28
 8001e5c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e5e:	4b2a      	ldr	r3, [pc, #168]	; (8001f08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e60:	1d3c      	adds	r4, r7, #4
 8001e62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e68:	4b28      	ldr	r3, [pc, #160]	; (8001f0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e6a:	881b      	ldrh	r3, [r3, #0]
 8001e6c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
 8001e72:	2300      	movs	r3, #0
 8001e74:	61bb      	str	r3, [r7, #24]
 8001e76:	2300      	movs	r3, #0
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e82:	4b23      	ldr	r3, [pc, #140]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d002      	beq.n	8001e98 <HAL_RCC_GetSysClockFreq+0x40>
 8001e92:	2b08      	cmp	r3, #8
 8001e94:	d003      	beq.n	8001e9e <HAL_RCC_GetSysClockFreq+0x46>
 8001e96:	e02d      	b.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e98:	4b1e      	ldr	r3, [pc, #120]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e9a:	623b      	str	r3, [r7, #32]
      break;
 8001e9c:	e02d      	b.n	8001efa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	0c9b      	lsrs	r3, r3, #18
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001eaa:	4413      	add	r3, r2
 8001eac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001eb0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d013      	beq.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ebc:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	0c5b      	lsrs	r3, r3, #17
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001eca:	4413      	add	r3, r2
 8001ecc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ed0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	4a0f      	ldr	r2, [pc, #60]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ed6:	fb02 f203 	mul.w	r2, r2, r3
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee2:	e004      	b.n	8001eee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	4a0c      	ldr	r2, [pc, #48]	; (8001f18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ee8:	fb02 f303 	mul.w	r3, r2, r3
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	623b      	str	r3, [r7, #32]
      break;
 8001ef2:	e002      	b.n	8001efa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ef4:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ef6:	623b      	str	r3, [r7, #32]
      break;
 8001ef8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001efa:	6a3b      	ldr	r3, [r7, #32]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3728      	adds	r7, #40	; 0x28
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc90      	pop	{r4, r7}
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	08002b70 	.word	0x08002b70
 8001f0c:	08002b80 	.word	0x08002b80
 8001f10:	40021000 	.word	0x40021000
 8001f14:	007a1200 	.word	0x007a1200
 8001f18:	003d0900 	.word	0x003d0900

08001f1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f20:	4b02      	ldr	r3, [pc, #8]	; (8001f2c <HAL_RCC_GetHCLKFreq+0x10>)
 8001f22:	681b      	ldr	r3, [r3, #0]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr
 8001f2c:	20000008 	.word	0x20000008

08001f30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f34:	f7ff fff2 	bl	8001f1c <HAL_RCC_GetHCLKFreq>
 8001f38:	4601      	mov	r1, r0
 8001f3a:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	0a1b      	lsrs	r3, r3, #8
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	4a03      	ldr	r2, [pc, #12]	; (8001f54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f46:	5cd3      	ldrb	r3, [r2, r3]
 8001f48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40021000 	.word	0x40021000
 8001f54:	08002bc0 	.word	0x08002bc0

08001f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f5c:	f7ff ffde 	bl	8001f1c <HAL_RCC_GetHCLKFreq>
 8001f60:	4601      	mov	r1, r0
 8001f62:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	0adb      	lsrs	r3, r3, #11
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	4a03      	ldr	r2, [pc, #12]	; (8001f7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f6e:	5cd3      	ldrb	r3, [r2, r3]
 8001f70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	08002bc0 	.word	0x08002bc0

08001f80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f88:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <RCC_Delay+0x34>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a0a      	ldr	r2, [pc, #40]	; (8001fb8 <RCC_Delay+0x38>)
 8001f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f92:	0a5b      	lsrs	r3, r3, #9
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	fb02 f303 	mul.w	r3, r2, r3
 8001f9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f9c:	bf00      	nop
  }
  while (Delay --);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	1e5a      	subs	r2, r3, #1
 8001fa2:	60fa      	str	r2, [r7, #12]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1f9      	bne.n	8001f9c <RCC_Delay+0x1c>
}
 8001fa8:	bf00      	nop
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	20000008 	.word	0x20000008
 8001fb8:	10624dd3 	.word	0x10624dd3

08001fbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e03f      	b.n	800204e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d106      	bne.n	8001fe8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 fcbc 	bl	8002960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2224      	movs	r2, #36	; 0x24
 8001fec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	68d2      	ldr	r2, [r2, #12]
 8001ffa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ffe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 f829 	bl	8002058 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6812      	ldr	r2, [r2, #0]
 800200e:	6912      	ldr	r2, [r2, #16]
 8002010:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002014:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6812      	ldr	r2, [r2, #0]
 800201e:	6952      	ldr	r2, [r2, #20]
 8002020:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002024:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6812      	ldr	r2, [r2, #0]
 800202e:	68d2      	ldr	r2, [r2, #12]
 8002030:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002034:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2220      	movs	r2, #32
 8002040:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2220      	movs	r2, #32
 8002048:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
	...

08002058 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002058:	b590      	push	{r4, r7, lr}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	6912      	ldr	r2, [r2, #16]
 800206a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	68d2      	ldr	r2, [r2, #12]
 8002072:	430a      	orrs	r2, r1
 8002074:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	431a      	orrs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	4313      	orrs	r3, r2
 8002086:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002096:	f023 030c 	bic.w	r3, r3, #12
 800209a:	68f9      	ldr	r1, [r7, #12]
 800209c:	430b      	orrs	r3, r1
 800209e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	6812      	ldr	r2, [r2, #0]
 80020a8:	6952      	ldr	r2, [r2, #20]
 80020aa:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6992      	ldr	r2, [r2, #24]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a52      	ldr	r2, [pc, #328]	; (8002204 <UART_SetConfig+0x1ac>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d14e      	bne.n	800215e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80020c0:	f7ff ff4a 	bl	8001f58 <HAL_RCC_GetPCLK2Freq>
 80020c4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6819      	ldr	r1, [r3, #0]
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	4613      	mov	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	009a      	lsls	r2, r3, #2
 80020d4:	441a      	add	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e0:	4a49      	ldr	r2, [pc, #292]	; (8002208 <UART_SetConfig+0x1b0>)
 80020e2:	fba2 2303 	umull	r2, r3, r2, r3
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	0118      	lsls	r0, r3, #4
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	009a      	lsls	r2, r3, #2
 80020f4:	441a      	add	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002100:	4b41      	ldr	r3, [pc, #260]	; (8002208 <UART_SetConfig+0x1b0>)
 8002102:	fba3 4302 	umull	r4, r3, r3, r2
 8002106:	095b      	lsrs	r3, r3, #5
 8002108:	2464      	movs	r4, #100	; 0x64
 800210a:	fb04 f303 	mul.w	r3, r4, r3
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	3332      	adds	r3, #50	; 0x32
 8002114:	4a3c      	ldr	r2, [pc, #240]	; (8002208 <UART_SetConfig+0x1b0>)
 8002116:	fba2 2303 	umull	r2, r3, r2, r3
 800211a:	095b      	lsrs	r3, r3, #5
 800211c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002120:	4418      	add	r0, r3
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	009a      	lsls	r2, r3, #2
 800212c:	441a      	add	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	fbb2 f2f3 	udiv	r2, r2, r3
 8002138:	4b33      	ldr	r3, [pc, #204]	; (8002208 <UART_SetConfig+0x1b0>)
 800213a:	fba3 4302 	umull	r4, r3, r3, r2
 800213e:	095b      	lsrs	r3, r3, #5
 8002140:	2464      	movs	r4, #100	; 0x64
 8002142:	fb04 f303 	mul.w	r3, r4, r3
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	011b      	lsls	r3, r3, #4
 800214a:	3332      	adds	r3, #50	; 0x32
 800214c:	4a2e      	ldr	r2, [pc, #184]	; (8002208 <UART_SetConfig+0x1b0>)
 800214e:	fba2 2303 	umull	r2, r3, r2, r3
 8002152:	095b      	lsrs	r3, r3, #5
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	4403      	add	r3, r0
 800215a:	608b      	str	r3, [r1, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800215c:	e04d      	b.n	80021fa <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800215e:	f7ff fee7 	bl	8001f30 <HAL_RCC_GetPCLK1Freq>
 8002162:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6819      	ldr	r1, [r3, #0]
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	009a      	lsls	r2, r3, #2
 8002172:	441a      	add	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	fbb2 f3f3 	udiv	r3, r2, r3
 800217e:	4a22      	ldr	r2, [pc, #136]	; (8002208 <UART_SetConfig+0x1b0>)
 8002180:	fba2 2303 	umull	r2, r3, r2, r3
 8002184:	095b      	lsrs	r3, r3, #5
 8002186:	0118      	lsls	r0, r3, #4
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	009a      	lsls	r2, r3, #2
 8002192:	441a      	add	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	fbb2 f2f3 	udiv	r2, r2, r3
 800219e:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <UART_SetConfig+0x1b0>)
 80021a0:	fba3 4302 	umull	r4, r3, r3, r2
 80021a4:	095b      	lsrs	r3, r3, #5
 80021a6:	2464      	movs	r4, #100	; 0x64
 80021a8:	fb04 f303 	mul.w	r3, r4, r3
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	011b      	lsls	r3, r3, #4
 80021b0:	3332      	adds	r3, #50	; 0x32
 80021b2:	4a15      	ldr	r2, [pc, #84]	; (8002208 <UART_SetConfig+0x1b0>)
 80021b4:	fba2 2303 	umull	r2, r3, r2, r3
 80021b8:	095b      	lsrs	r3, r3, #5
 80021ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021be:	4418      	add	r0, r3
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	009a      	lsls	r2, r3, #2
 80021ca:	441a      	add	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80021d6:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <UART_SetConfig+0x1b0>)
 80021d8:	fba3 4302 	umull	r4, r3, r3, r2
 80021dc:	095b      	lsrs	r3, r3, #5
 80021de:	2464      	movs	r4, #100	; 0x64
 80021e0:	fb04 f303 	mul.w	r3, r4, r3
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	011b      	lsls	r3, r3, #4
 80021e8:	3332      	adds	r3, #50	; 0x32
 80021ea:	4a07      	ldr	r2, [pc, #28]	; (8002208 <UART_SetConfig+0x1b0>)
 80021ec:	fba2 2303 	umull	r2, r3, r2, r3
 80021f0:	095b      	lsrs	r3, r3, #5
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	4403      	add	r3, r0
 80021f8:	608b      	str	r3, [r1, #8]
}
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd90      	pop	{r4, r7, pc}
 8002202:	bf00      	nop
 8002204:	40013800 	.word	0x40013800
 8002208:	51eb851f 	.word	0x51eb851f

0800220c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800220c:	b5b0      	push	{r4, r5, r7, lr}
 800220e:	b090      	sub	sp, #64	; 0x40
 8002210:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	SD_MPU6050_Result result, result2;
	int i2cs[2] = {&hi2c1,&hi2c2};
 8002212:	4a26      	ldr	r2, [pc, #152]	; (80022ac <main+0xa0>)
 8002214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002218:	e892 0003 	ldmia.w	r2, {r0, r1}
 800221c:	e883 0003 	stmia.w	r3, {r0, r1}
	int contador;
	uint8_t mpu_ok[15] = {"MPU WORK FINE\n"};
 8002220:	4b23      	ldr	r3, [pc, #140]	; (80022b0 <main+0xa4>)
 8002222:	f107 0414 	add.w	r4, r7, #20
 8002226:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002228:	c407      	stmia	r4!, {r0, r1, r2}
 800222a:	8023      	strh	r3, [r4, #0]
 800222c:	3402      	adds	r4, #2
 800222e:	0c1b      	lsrs	r3, r3, #16
 8002230:	7023      	strb	r3, [r4, #0]
	uint8_t mpu_not[17] = {"MPU NOT WORKING\n"};
 8002232:	4b20      	ldr	r3, [pc, #128]	; (80022b4 <main+0xa8>)
 8002234:	463c      	mov	r4, r7
 8002236:	461d      	mov	r5, r3
 8002238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800223a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800223c:	682b      	ldr	r3, [r5, #0]
 800223e:	7023      	strb	r3, [r4, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002240:	f7fd ff84 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002244:	f000 f83c 	bl	80022c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002248:	f000 f8fc 	bl	8002444 <MX_GPIO_Init>
  MX_I2C1_Init();
 800224c:	f000 f874 	bl	8002338 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002250:	f000 f8a0 	bl	8002394 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8002254:	f000 f8cc 	bl	80023f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  result = SD_MPU6050_Init(&hi2c1,&mpu,SD_MPU6050_Device_0,SD_MPU6050_Accelerometer_2G,SD_MPU6050_Gyroscope_250s );
 8002258:	2300      	movs	r3, #0
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	2300      	movs	r3, #0
 800225e:	2200      	movs	r2, #0
 8002260:	4915      	ldr	r1, [pc, #84]	; (80022b8 <main+0xac>)
 8002262:	4816      	ldr	r0, [pc, #88]	; (80022bc <main+0xb0>)
 8002264:	f000 f916 	bl	8002494 <SD_MPU6050_Init>
 8002268:	4603      	mov	r3, r0
 800226a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for(contador = 0;contador < 2 ;++contador){
 800226e:	2300      	movs	r3, #0
 8002270:	637b      	str	r3, [r7, #52]	; 0x34
 8002272:	e016      	b.n	80022a2 <main+0x96>
		  SD_MPU6050_ReadGyroscope(i2cs[contador], &mpu);
 8002274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800227c:	4413      	add	r3, r2
 800227e:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8002282:	490d      	ldr	r1, [pc, #52]	; (80022b8 <main+0xac>)
 8002284:	4618      	mov	r0, r3
 8002286:	f000 fa83 	bl	8002790 <SD_MPU6050_ReadGyroscope>
		  int16_t g_x = mpu.Gyroscope_X;
 800228a:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <main+0xac>)
 800228c:	8a5b      	ldrh	r3, [r3, #18]
 800228e:	863b      	strh	r3, [r7, #48]	; 0x30
		  int16_t g_y = mpu.Gyroscope_Y;
 8002290:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <main+0xac>)
 8002292:	8a9b      	ldrh	r3, [r3, #20]
 8002294:	85fb      	strh	r3, [r7, #46]	; 0x2e
		  int16_t g_z = mpu.Gyroscope_Z;
 8002296:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <main+0xac>)
 8002298:	8adb      	ldrh	r3, [r3, #22]
 800229a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	  for(contador = 0;contador < 2 ;++contador){
 800229c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800229e:	3301      	adds	r3, #1
 80022a0:	637b      	str	r3, [r7, #52]	; 0x34
 80022a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	dde5      	ble.n	8002274 <main+0x68>
 80022a8:	e7e1      	b.n	800226e <main+0x62>
 80022aa:	bf00      	nop
 80022ac:	08002b84 	.word	0x08002b84
 80022b0:	08002b8c 	.word	0x08002b8c
 80022b4:	08002b9c 	.word	0x08002b9c
 80022b8:	20000114 	.word	0x20000114
 80022bc:	2000002c 	.word	0x2000002c

080022c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b090      	sub	sp, #64	; 0x40
 80022c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022c6:	f107 0318 	add.w	r3, r7, #24
 80022ca:	2228      	movs	r2, #40	; 0x28
 80022cc:	2100      	movs	r1, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 fc3a 	bl	8002b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022d4:	1d3b      	adds	r3, r7, #4
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	605a      	str	r2, [r3, #4]
 80022dc:	609a      	str	r2, [r3, #8]
 80022de:	60da      	str	r2, [r3, #12]
 80022e0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022e2:	2302      	movs	r3, #2
 80022e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022e6:	2301      	movs	r3, #1
 80022e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022ea:	2310      	movs	r3, #16
 80022ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80022ee:	2300      	movs	r3, #0
 80022f0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022f2:	f107 0318 	add.w	r3, r7, #24
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff fa44 	bl	8001784 <HAL_RCC_OscConfig>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8002302:	f000 f8c1 	bl	8002488 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002306:	230f      	movs	r3, #15
 8002308:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800230a:	2300      	movs	r3, #0
 800230c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002312:	2300      	movs	r3, #0
 8002314:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002316:	2300      	movs	r3, #0
 8002318:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800231a:	1d3b      	adds	r3, r7, #4
 800231c:	2100      	movs	r1, #0
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff fcb0 	bl	8001c84 <HAL_RCC_ClockConfig>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800232a:	f000 f8ad 	bl	8002488 <Error_Handler>
  }
}
 800232e:	bf00      	nop
 8002330:	3740      	adds	r7, #64	; 0x40
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800233c:	4b12      	ldr	r3, [pc, #72]	; (8002388 <MX_I2C1_Init+0x50>)
 800233e:	4a13      	ldr	r2, [pc, #76]	; (800238c <MX_I2C1_Init+0x54>)
 8002340:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002342:	4b11      	ldr	r3, [pc, #68]	; (8002388 <MX_I2C1_Init+0x50>)
 8002344:	4a12      	ldr	r2, [pc, #72]	; (8002390 <MX_I2C1_Init+0x58>)
 8002346:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002348:	4b0f      	ldr	r3, [pc, #60]	; (8002388 <MX_I2C1_Init+0x50>)
 800234a:	2200      	movs	r2, #0
 800234c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800234e:	4b0e      	ldr	r3, [pc, #56]	; (8002388 <MX_I2C1_Init+0x50>)
 8002350:	2200      	movs	r2, #0
 8002352:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002354:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <MX_I2C1_Init+0x50>)
 8002356:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800235a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800235c:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <MX_I2C1_Init+0x50>)
 800235e:	2200      	movs	r2, #0
 8002360:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002362:	4b09      	ldr	r3, [pc, #36]	; (8002388 <MX_I2C1_Init+0x50>)
 8002364:	2200      	movs	r2, #0
 8002366:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002368:	4b07      	ldr	r3, [pc, #28]	; (8002388 <MX_I2C1_Init+0x50>)
 800236a:	2200      	movs	r2, #0
 800236c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800236e:	4b06      	ldr	r3, [pc, #24]	; (8002388 <MX_I2C1_Init+0x50>)
 8002370:	2200      	movs	r2, #0
 8002372:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002374:	4804      	ldr	r0, [pc, #16]	; (8002388 <MX_I2C1_Init+0x50>)
 8002376:	f7fe f987 	bl	8000688 <HAL_I2C_Init>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002380:	f000 f882 	bl	8002488 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002384:	bf00      	nop
 8002386:	bd80      	pop	{r7, pc}
 8002388:	2000002c 	.word	0x2000002c
 800238c:	40005400 	.word	0x40005400
 8002390:	000186a0 	.word	0x000186a0

08002394 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002398:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <MX_I2C2_Init+0x50>)
 800239a:	4a13      	ldr	r2, [pc, #76]	; (80023e8 <MX_I2C2_Init+0x54>)
 800239c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800239e:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <MX_I2C2_Init+0x50>)
 80023a0:	4a12      	ldr	r2, [pc, #72]	; (80023ec <MX_I2C2_Init+0x58>)
 80023a2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023a4:	4b0f      	ldr	r3, [pc, #60]	; (80023e4 <MX_I2C2_Init+0x50>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80023aa:	4b0e      	ldr	r3, [pc, #56]	; (80023e4 <MX_I2C2_Init+0x50>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023b0:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <MX_I2C2_Init+0x50>)
 80023b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023b6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023b8:	4b0a      	ldr	r3, [pc, #40]	; (80023e4 <MX_I2C2_Init+0x50>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80023be:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <MX_I2C2_Init+0x50>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023c4:	4b07      	ldr	r3, [pc, #28]	; (80023e4 <MX_I2C2_Init+0x50>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <MX_I2C2_Init+0x50>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80023d0:	4804      	ldr	r0, [pc, #16]	; (80023e4 <MX_I2C2_Init+0x50>)
 80023d2:	f7fe f959 	bl	8000688 <HAL_I2C_Init>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80023dc:	f000 f854 	bl	8002488 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80023e0:	bf00      	nop
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	20000080 	.word	0x20000080
 80023e8:	40005800 	.word	0x40005800
 80023ec:	000186a0 	.word	0x000186a0

080023f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023f4:	4b11      	ldr	r3, [pc, #68]	; (800243c <MX_USART1_UART_Init+0x4c>)
 80023f6:	4a12      	ldr	r2, [pc, #72]	; (8002440 <MX_USART1_UART_Init+0x50>)
 80023f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023fa:	4b10      	ldr	r3, [pc, #64]	; (800243c <MX_USART1_UART_Init+0x4c>)
 80023fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002400:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002402:	4b0e      	ldr	r3, [pc, #56]	; (800243c <MX_USART1_UART_Init+0x4c>)
 8002404:	2200      	movs	r2, #0
 8002406:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002408:	4b0c      	ldr	r3, [pc, #48]	; (800243c <MX_USART1_UART_Init+0x4c>)
 800240a:	2200      	movs	r2, #0
 800240c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800240e:	4b0b      	ldr	r3, [pc, #44]	; (800243c <MX_USART1_UART_Init+0x4c>)
 8002410:	2200      	movs	r2, #0
 8002412:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002414:	4b09      	ldr	r3, [pc, #36]	; (800243c <MX_USART1_UART_Init+0x4c>)
 8002416:	220c      	movs	r2, #12
 8002418:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800241a:	4b08      	ldr	r3, [pc, #32]	; (800243c <MX_USART1_UART_Init+0x4c>)
 800241c:	2200      	movs	r2, #0
 800241e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002420:	4b06      	ldr	r3, [pc, #24]	; (800243c <MX_USART1_UART_Init+0x4c>)
 8002422:	2200      	movs	r2, #0
 8002424:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002426:	4805      	ldr	r0, [pc, #20]	; (800243c <MX_USART1_UART_Init+0x4c>)
 8002428:	f7ff fdc8 	bl	8001fbc <HAL_UART_Init>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002432:	f000 f829 	bl	8002488 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	200000d4 	.word	0x200000d4
 8002440:	40013800 	.word	0x40013800

08002444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800244a:	4a0e      	ldr	r2, [pc, #56]	; (8002484 <MX_GPIO_Init+0x40>)
 800244c:	4b0d      	ldr	r3, [pc, #52]	; (8002484 <MX_GPIO_Init+0x40>)
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	f043 0308 	orr.w	r3, r3, #8
 8002454:	6193      	str	r3, [r2, #24]
 8002456:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <MX_GPIO_Init+0x40>)
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	607b      	str	r3, [r7, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002462:	4a08      	ldr	r2, [pc, #32]	; (8002484 <MX_GPIO_Init+0x40>)
 8002464:	4b07      	ldr	r3, [pc, #28]	; (8002484 <MX_GPIO_Init+0x40>)
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	f043 0304 	orr.w	r3, r3, #4
 800246c:	6193      	str	r3, [r2, #24]
 800246e:	4b05      	ldr	r3, [pc, #20]	; (8002484 <MX_GPIO_Init+0x40>)
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	603b      	str	r3, [r7, #0]
 8002478:	683b      	ldr	r3, [r7, #0]

}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr
 8002484:	40021000 	.word	0x40021000

08002488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr

08002494 <SD_MPU6050_Init>:
#define MPU6050_ACCE_SENS_4			((float) 8192)
#define MPU6050_ACCE_SENS_8			((float) 4096)
#define MPU6050_ACCE_SENS_16		((float) 2048)

SD_MPU6050_Result SD_MPU6050_Init(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Device DeviceNumber, SD_MPU6050_Accelerometer AccelerometerSensitivity, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08a      	sub	sp, #40	; 0x28
 8002498:	af02      	add	r7, sp, #8
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	4611      	mov	r1, r2
 80024a0:	461a      	mov	r2, r3
 80024a2:	460b      	mov	r3, r1
 80024a4:	71fb      	strb	r3, [r7, #7]
 80024a6:	4613      	mov	r3, r2
 80024a8:	71bb      	strb	r3, [r7, #6]
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 80024aa:	2375      	movs	r3, #117	; 0x75
 80024ac:	76bb      	strb	r3, [r7, #26]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	61fb      	str	r3, [r7, #28]
	uint8_t d[2];


	/* Format I2C address */
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	f063 032f 	orn	r3, r3, #47	; 0x2f
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	701a      	strb	r2, [r3, #0]
	uint8_t address = DataStruct->Address;
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	76fb      	strb	r3, [r7, #27]

	/* Check if device is connected */
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 80024c4:	7efb      	ldrb	r3, [r7, #27]
 80024c6:	b299      	uxth	r1, r3
 80024c8:	2305      	movs	r3, #5
 80024ca:	2202      	movs	r2, #2
 80024cc:	69f8      	ldr	r0, [r7, #28]
 80024ce:	f7fe fd2f 	bl	8000f30 <HAL_I2C_IsDeviceReady>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <SD_MPU6050_Init+0x48>
	{
				return SD_MPU6050_Result_Error;
 80024d8:	2301      	movs	r3, #1
 80024da:	e04c      	b.n	8002576 <SD_MPU6050_Init+0xe2>
	}
	/* Check who am I */
	//------------------
		/* Send address */
		if(HAL_I2C_Master_Transmit(Handle, address, &WHO_AM_I, 1, 1000) != HAL_OK)
 80024dc:	7efb      	ldrb	r3, [r7, #27]
 80024de:	b299      	uxth	r1, r3
 80024e0:	f107 021a 	add.w	r2, r7, #26
 80024e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	2301      	movs	r3, #1
 80024ec:	69f8      	ldr	r0, [r7, #28]
 80024ee:	f7fe f9f3 	bl	80008d8 <HAL_I2C_Master_Transmit>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <SD_MPU6050_Init+0x68>
		{
			return SD_MPU6050_Result_Error;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e03c      	b.n	8002576 <SD_MPU6050_Init+0xe2>
		}

		/* Receive multiple byte */
		if(HAL_I2C_Master_Receive(Handle, address, &temp, 1, 1000) != HAL_OK)
 80024fc:	7efb      	ldrb	r3, [r7, #27]
 80024fe:	b299      	uxth	r1, r3
 8002500:	f107 0219 	add.w	r2, r7, #25
 8002504:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	2301      	movs	r3, #1
 800250c:	69f8      	ldr	r0, [r7, #28]
 800250e:	f7fe fae1 	bl	8000ad4 <HAL_I2C_Master_Receive>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <SD_MPU6050_Init+0x8c>
		{
			return SD_MPU6050_Result_Error;
 8002518:	2301      	movs	r3, #1
 800251a:	e02c      	b.n	8002576 <SD_MPU6050_Init+0xe2>

		/* Checking */
		while(temp != MPU6050_I_AM)
		{
				/* Return error */
				return SD_MPU6050_Result_DeviceInvalid;
 800251c:	2303      	movs	r3, #3
 800251e:	e02a      	b.n	8002576 <SD_MPU6050_Init+0xe2>
		while(temp != MPU6050_I_AM)
 8002520:	bf00      	nop
 8002522:	7e7b      	ldrb	r3, [r7, #25]
 8002524:	2b68      	cmp	r3, #104	; 0x68
 8002526:	d1f9      	bne.n	800251c <SD_MPU6050_Init+0x88>
	//------------------

	/* Wakeup MPU6050 */
	//------------------
		/* Format array to send */
		d[0] = MPU6050_PWR_MGMT_1;
 8002528:	236b      	movs	r3, #107	; 0x6b
 800252a:	753b      	strb	r3, [r7, #20]
		d[1] = 0x00;
 800252c:	2300      	movs	r3, #0
 800252e:	757b      	strb	r3, [r7, #21]

		/* Try to transmit via I2C */
		if(HAL_I2C_Master_Transmit(Handle,(uint16_t)address , (uint8_t *)d, 2, 1000) != HAL_OK)
 8002530:	7efb      	ldrb	r3, [r7, #27]
 8002532:	b299      	uxth	r1, r3
 8002534:	f107 0214 	add.w	r2, r7, #20
 8002538:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	2302      	movs	r3, #2
 8002540:	69f8      	ldr	r0, [r7, #28]
 8002542:	f7fe f9c9 	bl	80008d8 <HAL_I2C_Master_Transmit>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <SD_MPU6050_Init+0xbc>
		{
					return SD_MPU6050_Result_Error;
 800254c:	2301      	movs	r3, #1
 800254e:	e012      	b.n	8002576 <SD_MPU6050_Init+0xe2>
		}
	//------------------

	/* Set sample rate to 1kHz */
	SD_MPU6050_SetDataRate(I2Cx,DataStruct, SD_MPU6050_DataRate_1KHz);
 8002550:	2207      	movs	r2, #7
 8002552:	68b9      	ldr	r1, [r7, #8]
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 f812 	bl	800257e <SD_MPU6050_SetDataRate>

	/* Config accelerometer */
	SD_MPU6050_SetAccelerometer(I2Cx,DataStruct, AccelerometerSensitivity);
 800255a:	79bb      	ldrb	r3, [r7, #6]
 800255c:	461a      	mov	r2, r3
 800255e:	68b9      	ldr	r1, [r7, #8]
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 f831 	bl	80025c8 <SD_MPU6050_SetAccelerometer>

	/* Config Gyroscope */
	SD_MPU6050_SetGyroscope(I2Cx,DataStruct, GyroscopeSensitivity);
 8002566:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800256a:	461a      	mov	r2, r3
 800256c:	68b9      	ldr	r1, [r7, #8]
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 f89a 	bl	80026a8 <SD_MPU6050_SetGyroscope>

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3720      	adds	r7, #32
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <SD_MPU6050_SetDataRate>:

SD_MPU6050_Result SD_MPU6050_SetDataRate(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, uint8_t rate)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b088      	sub	sp, #32
 8002582:	af02      	add	r7, sp, #8
 8002584:	60f8      	str	r0, [r7, #12]
 8002586:	60b9      	str	r1, [r7, #8]
 8002588:	4613      	mov	r3, r2
 800258a:	71fb      	strb	r3, [r7, #7]
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	74fb      	strb	r3, [r7, #19]
	/* Format array to send */
	d[0] = MPU6050_SMPLRT_DIV;
 8002596:	2319      	movs	r3, #25
 8002598:	743b      	strb	r3, [r7, #16]
	d[1] = rate;
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	747b      	strb	r3, [r7, #17]

	/* Set data sample rate */
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 800259e:	bf00      	nop
 80025a0:	7cfb      	ldrb	r3, [r7, #19]
 80025a2:	b299      	uxth	r1, r3
 80025a4:	f107 0210 	add.w	r2, r7, #16
 80025a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	2302      	movs	r3, #2
 80025b0:	6978      	ldr	r0, [r7, #20]
 80025b2:	f7fe f991 	bl	80008d8 <HAL_I2C_Master_Transmit>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1f1      	bne.n	80025a0 <SD_MPU6050_SetDataRate+0x22>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
	...

080025c8 <SD_MPU6050_SetAccelerometer>:

SD_MPU6050_Result SD_MPU6050_SetAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Accelerometer AccelerometerSensitivity)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b088      	sub	sp, #32
 80025cc:	af02      	add	r7, sp, #8
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	4613      	mov	r3, r2
 80025d4:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 80025e0:	231c      	movs	r3, #28
 80025e2:	747b      	strb	r3, [r7, #17]

	/* Config accelerometer */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 80025e4:	bf00      	nop
 80025e6:	7cfb      	ldrb	r3, [r7, #19]
 80025e8:	b299      	uxth	r1, r3
 80025ea:	f107 0211 	add.w	r2, r7, #17
 80025ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	2301      	movs	r3, #1
 80025f6:	6978      	ldr	r0, [r7, #20]
 80025f8:	f7fe f96e 	bl	80008d8 <HAL_I2C_Master_Transmit>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f1      	bne.n	80025e6 <SD_MPU6050_SetAccelerometer+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 8002602:	bf00      	nop
 8002604:	7cfb      	ldrb	r3, [r7, #19]
 8002606:	b299      	uxth	r1, r3
 8002608:	f107 0212 	add.w	r2, r7, #18
 800260c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	2301      	movs	r3, #1
 8002614:	6978      	ldr	r0, [r7, #20]
 8002616:	f7fe fa5d 	bl	8000ad4 <HAL_I2C_Master_Receive>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1f1      	bne.n	8002604 <SD_MPU6050_SetAccelerometer+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 8002620:	7cbb      	ldrb	r3, [r7, #18]
 8002622:	b25b      	sxtb	r3, r3
 8002624:	f023 0318 	bic.w	r3, r3, #24
 8002628:	b25a      	sxtb	r2, r3
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	b25b      	sxtb	r3, r3
 8002630:	4313      	orrs	r3, r2
 8002632:	b25b      	sxtb	r3, r3
 8002634:	b2db      	uxtb	r3, r3
 8002636:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8002638:	bf00      	nop
 800263a:	7cfb      	ldrb	r3, [r7, #19]
 800263c:	b299      	uxth	r1, r3
 800263e:	f107 0212 	add.w	r2, r7, #18
 8002642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	2301      	movs	r3, #1
 800264a:	6978      	ldr	r0, [r7, #20]
 800264c:	f7fe f944 	bl	80008d8 <HAL_I2C_Master_Transmit>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f1      	bne.n	800263a <SD_MPU6050_SetAccelerometer+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	2b03      	cmp	r3, #3
 800265a:	d81f      	bhi.n	800269c <SD_MPU6050_SetAccelerometer+0xd4>
 800265c:	a201      	add	r2, pc, #4	; (adr r2, 8002664 <SD_MPU6050_SetAccelerometer+0x9c>)
 800265e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002662:	bf00      	nop
 8002664:	08002675 	.word	0x08002675
 8002668:	0800267f 	.word	0x0800267f
 800266c:	08002689 	.word	0x08002689
 8002670:	08002693 	.word	0x08002693
		case SD_MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2;
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800267a:	609a      	str	r2, [r3, #8]
			break;
 800267c:	e00f      	b.n	800269e <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_4G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4;
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8002684:	609a      	str	r2, [r3, #8]
			break;
 8002686:	e00a      	b.n	800269e <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800268e:	609a      	str	r2, [r3, #8]
			break;
 8002690:	e005      	b.n	800269e <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8002698:	609a      	str	r2, [r3, #8]
			break;
 800269a:	e000      	b.n	800269e <SD_MPU6050_SetAccelerometer+0xd6>
		default:
			break;
 800269c:	bf00      	nop
		}

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <SD_MPU6050_SetGyroscope>:

SD_MPU6050_Result SD_MPU6050_SetGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af02      	add	r7, sp, #8
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	4613      	mov	r3, r2
 80026b4:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 80026c0:	231b      	movs	r3, #27
 80026c2:	747b      	strb	r3, [r7, #17]

	/* Config gyroscope */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 80026c4:	bf00      	nop
 80026c6:	7cfb      	ldrb	r3, [r7, #19]
 80026c8:	b299      	uxth	r1, r3
 80026ca:	f107 0211 	add.w	r2, r7, #17
 80026ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	2301      	movs	r3, #1
 80026d6:	6978      	ldr	r0, [r7, #20]
 80026d8:	f7fe f8fe 	bl	80008d8 <HAL_I2C_Master_Transmit>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f1      	bne.n	80026c6 <SD_MPU6050_SetGyroscope+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 80026e2:	bf00      	nop
 80026e4:	7cfb      	ldrb	r3, [r7, #19]
 80026e6:	b299      	uxth	r1, r3
 80026e8:	f107 0212 	add.w	r2, r7, #18
 80026ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	2301      	movs	r3, #1
 80026f4:	6978      	ldr	r0, [r7, #20]
 80026f6:	f7fe f9ed 	bl	8000ad4 <HAL_I2C_Master_Receive>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1f1      	bne.n	80026e4 <SD_MPU6050_SetGyroscope+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 8002700:	7cbb      	ldrb	r3, [r7, #18]
 8002702:	b25b      	sxtb	r3, r3
 8002704:	f023 0318 	bic.w	r3, r3, #24
 8002708:	b25a      	sxtb	r2, r3
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	b25b      	sxtb	r3, r3
 8002710:	4313      	orrs	r3, r2
 8002712:	b25b      	sxtb	r3, r3
 8002714:	b2db      	uxtb	r3, r3
 8002716:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8002718:	bf00      	nop
 800271a:	7cfb      	ldrb	r3, [r7, #19]
 800271c:	b299      	uxth	r1, r3
 800271e:	f107 0212 	add.w	r2, r7, #18
 8002722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	2301      	movs	r3, #1
 800272a:	6978      	ldr	r0, [r7, #20]
 800272c:	f7fe f8d4 	bl	80008d8 <HAL_I2C_Master_Transmit>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f1      	bne.n	800271a <SD_MPU6050_SetGyroscope+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	switch (GyroscopeSensitivity) {
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	2b03      	cmp	r3, #3
 800273a:	d81b      	bhi.n	8002774 <SD_MPU6050_SetGyroscope+0xcc>
 800273c:	a201      	add	r2, pc, #4	; (adr r2, 8002744 <SD_MPU6050_SetGyroscope+0x9c>)
 800273e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002742:	bf00      	nop
 8002744:	08002755 	.word	0x08002755
 8002748:	0800275d 	.word	0x0800275d
 800274c:	08002765 	.word	0x08002765
 8002750:	0800276d 	.word	0x0800276d
			case SD_MPU6050_Gyroscope_250s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250;
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	4a0a      	ldr	r2, [pc, #40]	; (8002780 <SD_MPU6050_SetGyroscope+0xd8>)
 8002758:	605a      	str	r2, [r3, #4]
				break;
 800275a:	e00c      	b.n	8002776 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_500s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500;
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	4a09      	ldr	r2, [pc, #36]	; (8002784 <SD_MPU6050_SetGyroscope+0xdc>)
 8002760:	605a      	str	r2, [r3, #4]
				break;
 8002762:	e008      	b.n	8002776 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_1000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	4a08      	ldr	r2, [pc, #32]	; (8002788 <SD_MPU6050_SetGyroscope+0xe0>)
 8002768:	605a      	str	r2, [r3, #4]
				break;
 800276a:	e004      	b.n	8002776 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_2000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	4a07      	ldr	r2, [pc, #28]	; (800278c <SD_MPU6050_SetGyroscope+0xe4>)
 8002770:	605a      	str	r2, [r3, #4]
				break;
 8002772:	e000      	b.n	8002776 <SD_MPU6050_SetGyroscope+0xce>
			default:
				break;
 8002774:	bf00      	nop
		}
	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	3bfa232d 	.word	0x3bfa232d
 8002784:	3c7a232d 	.word	0x3c7a232d
 8002788:	3cf9c190 	.word	0x3cf9c190
 800278c:	3d79c190 	.word	0x3d79c190

08002790 <SD_MPU6050_ReadGyroscope>:

	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
SD_MPU6050_Result SD_MPU6050_ReadGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b088      	sub	sp, #32
 8002794:	af02      	add	r7, sp, #8
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	uint8_t reg = MPU6050_GYRO_XOUT_H;
 800279a:	2343      	movs	r3, #67	; 0x43
 800279c:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef* Handle = I2Cx;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	74fb      	strb	r3, [r7, #19]

	/* Read gyroscope data */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 80027a8:	bf00      	nop
 80027aa:	7cfb      	ldrb	r3, [r7, #19]
 80027ac:	b299      	uxth	r1, r3
 80027ae:	f107 020b 	add.w	r2, r7, #11
 80027b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	2301      	movs	r3, #1
 80027ba:	6978      	ldr	r0, [r7, #20]
 80027bc:	f7fe f88c 	bl	80008d8 <HAL_I2C_Master_Transmit>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f1      	bne.n	80027aa <SD_MPU6050_ReadGyroscope+0x1a>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 6, 1000) != HAL_OK);
 80027c6:	bf00      	nop
 80027c8:	7cfb      	ldrb	r3, [r7, #19]
 80027ca:	b299      	uxth	r1, r3
 80027cc:	f107 020c 	add.w	r2, r7, #12
 80027d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	2306      	movs	r3, #6
 80027d8:	6978      	ldr	r0, [r7, #20]
 80027da:	f7fe f97b 	bl	8000ad4 <HAL_I2C_Master_Receive>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1f1      	bne.n	80027c8 <SD_MPU6050_ReadGyroscope+0x38>

	/* Format */
	DataStruct->Gyroscope_X = (int16_t)(data[0] << 8 | data[1]);
 80027e4:	7b3b      	ldrb	r3, [r7, #12]
 80027e6:	021b      	lsls	r3, r3, #8
 80027e8:	b21a      	sxth	r2, r3
 80027ea:	7b7b      	ldrb	r3, [r7, #13]
 80027ec:	b21b      	sxth	r3, r3
 80027ee:	4313      	orrs	r3, r2
 80027f0:	b21a      	sxth	r2, r3
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	825a      	strh	r2, [r3, #18]
	DataStruct->Gyroscope_Y = (int16_t)(data[2] << 8 | data[3]);
 80027f6:	7bbb      	ldrb	r3, [r7, #14]
 80027f8:	021b      	lsls	r3, r3, #8
 80027fa:	b21a      	sxth	r2, r3
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
 80027fe:	b21b      	sxth	r3, r3
 8002800:	4313      	orrs	r3, r2
 8002802:	b21a      	sxth	r2, r3
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyroscope_Z = (int16_t)(data[4] << 8 | data[5]);
 8002808:	7c3b      	ldrb	r3, [r7, #16]
 800280a:	021b      	lsls	r3, r3, #8
 800280c:	b21a      	sxth	r2, r3
 800280e:	7c7b      	ldrb	r3, [r7, #17]
 8002810:	b21b      	sxth	r3, r3
 8002812:	4313      	orrs	r3, r2
 8002814:	b21a      	sxth	r2, r3
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	82da      	strh	r2, [r3, #22]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800282a:	4a15      	ldr	r2, [pc, #84]	; (8002880 <HAL_MspInit+0x5c>)
 800282c:	4b14      	ldr	r3, [pc, #80]	; (8002880 <HAL_MspInit+0x5c>)
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	6193      	str	r3, [r2, #24]
 8002836:	4b12      	ldr	r3, [pc, #72]	; (8002880 <HAL_MspInit+0x5c>)
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	60bb      	str	r3, [r7, #8]
 8002840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002842:	4a0f      	ldr	r2, [pc, #60]	; (8002880 <HAL_MspInit+0x5c>)
 8002844:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <HAL_MspInit+0x5c>)
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800284c:	61d3      	str	r3, [r2, #28]
 800284e:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <HAL_MspInit+0x5c>)
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002856:	607b      	str	r3, [r7, #4]
 8002858:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800285a:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <HAL_MspInit+0x60>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	4a04      	ldr	r2, [pc, #16]	; (8002884 <HAL_MspInit+0x60>)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002876:	bf00      	nop
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr
 8002880:	40021000 	.word	0x40021000
 8002884:	40010000 	.word	0x40010000

08002888 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08a      	sub	sp, #40	; 0x28
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002890:	f107 0318 	add.w	r3, r7, #24
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a2b      	ldr	r2, [pc, #172]	; (8002950 <HAL_I2C_MspInit+0xc8>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d124      	bne.n	80028f2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028a8:	4a2a      	ldr	r2, [pc, #168]	; (8002954 <HAL_I2C_MspInit+0xcc>)
 80028aa:	4b2a      	ldr	r3, [pc, #168]	; (8002954 <HAL_I2C_MspInit+0xcc>)
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	f043 0308 	orr.w	r3, r3, #8
 80028b2:	6193      	str	r3, [r2, #24]
 80028b4:	4b27      	ldr	r3, [pc, #156]	; (8002954 <HAL_I2C_MspInit+0xcc>)
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028c0:	23c0      	movs	r3, #192	; 0xc0
 80028c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028c4:	2312      	movs	r3, #18
 80028c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028c8:	2303      	movs	r3, #3
 80028ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028cc:	f107 0318 	add.w	r3, r7, #24
 80028d0:	4619      	mov	r1, r3
 80028d2:	4821      	ldr	r0, [pc, #132]	; (8002958 <HAL_I2C_MspInit+0xd0>)
 80028d4:	f7fd fd7e 	bl	80003d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028d8:	4a1e      	ldr	r2, [pc, #120]	; (8002954 <HAL_I2C_MspInit+0xcc>)
 80028da:	4b1e      	ldr	r3, [pc, #120]	; (8002954 <HAL_I2C_MspInit+0xcc>)
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028e2:	61d3      	str	r3, [r2, #28]
 80028e4:	4b1b      	ldr	r3, [pc, #108]	; (8002954 <HAL_I2C_MspInit+0xcc>)
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ec:	613b      	str	r3, [r7, #16]
 80028ee:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80028f0:	e029      	b.n	8002946 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a19      	ldr	r2, [pc, #100]	; (800295c <HAL_I2C_MspInit+0xd4>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d124      	bne.n	8002946 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028fc:	4a15      	ldr	r2, [pc, #84]	; (8002954 <HAL_I2C_MspInit+0xcc>)
 80028fe:	4b15      	ldr	r3, [pc, #84]	; (8002954 <HAL_I2C_MspInit+0xcc>)
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	f043 0308 	orr.w	r3, r3, #8
 8002906:	6193      	str	r3, [r2, #24]
 8002908:	4b12      	ldr	r3, [pc, #72]	; (8002954 <HAL_I2C_MspInit+0xcc>)
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	f003 0308 	and.w	r3, r3, #8
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002914:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800291a:	2312      	movs	r3, #18
 800291c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800291e:	2303      	movs	r3, #3
 8002920:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002922:	f107 0318 	add.w	r3, r7, #24
 8002926:	4619      	mov	r1, r3
 8002928:	480b      	ldr	r0, [pc, #44]	; (8002958 <HAL_I2C_MspInit+0xd0>)
 800292a:	f7fd fd53 	bl	80003d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800292e:	4a09      	ldr	r2, [pc, #36]	; (8002954 <HAL_I2C_MspInit+0xcc>)
 8002930:	4b08      	ldr	r3, [pc, #32]	; (8002954 <HAL_I2C_MspInit+0xcc>)
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002938:	61d3      	str	r3, [r2, #28]
 800293a:	4b06      	ldr	r3, [pc, #24]	; (8002954 <HAL_I2C_MspInit+0xcc>)
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002942:	60bb      	str	r3, [r7, #8]
 8002944:	68bb      	ldr	r3, [r7, #8]
}
 8002946:	bf00      	nop
 8002948:	3728      	adds	r7, #40	; 0x28
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40005400 	.word	0x40005400
 8002954:	40021000 	.word	0x40021000
 8002958:	40010c00 	.word	0x40010c00
 800295c:	40005800 	.word	0x40005800

08002960 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002968:	f107 0310 	add.w	r3, r7, #16
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a1c      	ldr	r2, [pc, #112]	; (80029ec <HAL_UART_MspInit+0x8c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d131      	bne.n	80029e4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002980:	4a1b      	ldr	r2, [pc, #108]	; (80029f0 <HAL_UART_MspInit+0x90>)
 8002982:	4b1b      	ldr	r3, [pc, #108]	; (80029f0 <HAL_UART_MspInit+0x90>)
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800298a:	6193      	str	r3, [r2, #24]
 800298c:	4b18      	ldr	r3, [pc, #96]	; (80029f0 <HAL_UART_MspInit+0x90>)
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002998:	4a15      	ldr	r2, [pc, #84]	; (80029f0 <HAL_UART_MspInit+0x90>)
 800299a:	4b15      	ldr	r3, [pc, #84]	; (80029f0 <HAL_UART_MspInit+0x90>)
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	f043 0304 	orr.w	r3, r3, #4
 80029a2:	6193      	str	r3, [r2, #24]
 80029a4:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <HAL_UART_MspInit+0x90>)
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	60bb      	str	r3, [r7, #8]
 80029ae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80029b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b6:	2302      	movs	r3, #2
 80029b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029ba:	2303      	movs	r3, #3
 80029bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029be:	f107 0310 	add.w	r3, r7, #16
 80029c2:	4619      	mov	r1, r3
 80029c4:	480b      	ldr	r0, [pc, #44]	; (80029f4 <HAL_UART_MspInit+0x94>)
 80029c6:	f7fd fd05 	bl	80003d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d8:	f107 0310 	add.w	r3, r7, #16
 80029dc:	4619      	mov	r1, r3
 80029de:	4805      	ldr	r0, [pc, #20]	; (80029f4 <HAL_UART_MspInit+0x94>)
 80029e0:	f7fd fcf8 	bl	80003d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80029e4:	bf00      	nop
 80029e6:	3720      	adds	r7, #32
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40013800 	.word	0x40013800
 80029f0:	40021000 	.word	0x40021000
 80029f4:	40010800 	.word	0x40010800

080029f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr

08002a04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a08:	e7fe      	b.n	8002a08 <HardFault_Handler+0x4>

08002a0a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a0e:	e7fe      	b.n	8002a0e <MemManage_Handler+0x4>

08002a10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a14:	e7fe      	b.n	8002a14 <BusFault_Handler+0x4>

08002a16 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a16:	b480      	push	{r7}
 8002a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a1a:	e7fe      	b.n	8002a1a <UsageFault_Handler+0x4>

08002a1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a20:	bf00      	nop
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr

08002a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a2c:	bf00      	nop
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a38:	bf00      	nop
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr

08002a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a44:	f7fd fbc8 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a48:	bf00      	nop
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002a50:	4a15      	ldr	r2, [pc, #84]	; (8002aa8 <SystemInit+0x5c>)
 8002a52:	4b15      	ldr	r3, [pc, #84]	; (8002aa8 <SystemInit+0x5c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002a5c:	4912      	ldr	r1, [pc, #72]	; (8002aa8 <SystemInit+0x5c>)
 8002a5e:	4b12      	ldr	r3, [pc, #72]	; (8002aa8 <SystemInit+0x5c>)
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	4b12      	ldr	r3, [pc, #72]	; (8002aac <SystemInit+0x60>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002a68:	4a0f      	ldr	r2, [pc, #60]	; (8002aa8 <SystemInit+0x5c>)
 8002a6a:	4b0f      	ldr	r3, [pc, #60]	; (8002aa8 <SystemInit+0x5c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a76:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a78:	4a0b      	ldr	r2, [pc, #44]	; (8002aa8 <SystemInit+0x5c>)
 8002a7a:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <SystemInit+0x5c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a82:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002a84:	4a08      	ldr	r2, [pc, #32]	; (8002aa8 <SystemInit+0x5c>)
 8002a86:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <SystemInit+0x5c>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002a8e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <SystemInit+0x5c>)
 8002a92:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002a96:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002a98:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <SystemInit+0x64>)
 8002a9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a9e:	609a      	str	r2, [r3, #8]
#endif 
}
 8002aa0:	bf00      	nop
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	f8ff0000 	.word	0xf8ff0000
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002ab4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002ab6:	e003      	b.n	8002ac0 <LoopCopyDataInit>

08002ab8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002aba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002abc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002abe:	3104      	adds	r1, #4

08002ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002ac0:	480a      	ldr	r0, [pc, #40]	; (8002aec <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002ac2:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002ac4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002ac6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002ac8:	d3f6      	bcc.n	8002ab8 <CopyDataInit>
  ldr r2, =_sbss
 8002aca:	4a0a      	ldr	r2, [pc, #40]	; (8002af4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002acc:	e002      	b.n	8002ad4 <LoopFillZerobss>

08002ace <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002ace:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002ad0:	f842 3b04 	str.w	r3, [r2], #4

08002ad4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002ad4:	4b08      	ldr	r3, [pc, #32]	; (8002af8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002ad6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002ad8:	d3f9      	bcc.n	8002ace <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ada:	f7ff ffb7 	bl	8002a4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ade:	f000 f80f 	bl	8002b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ae2:	f7ff fb93 	bl	800220c <main>
  bx lr
 8002ae6:	4770      	bx	lr
  ldr r3, =_sidata
 8002ae8:	08002bd0 	.word	0x08002bd0
  ldr r0, =_sdata
 8002aec:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002af0:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8002af4:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8002af8:	20000130 	.word	0x20000130

08002afc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002afc:	e7fe      	b.n	8002afc <ADC1_2_IRQHandler>
	...

08002b00 <__libc_init_array>:
 8002b00:	b570      	push	{r4, r5, r6, lr}
 8002b02:	2500      	movs	r5, #0
 8002b04:	4e0c      	ldr	r6, [pc, #48]	; (8002b38 <__libc_init_array+0x38>)
 8002b06:	4c0d      	ldr	r4, [pc, #52]	; (8002b3c <__libc_init_array+0x3c>)
 8002b08:	1ba4      	subs	r4, r4, r6
 8002b0a:	10a4      	asrs	r4, r4, #2
 8002b0c:	42a5      	cmp	r5, r4
 8002b0e:	d109      	bne.n	8002b24 <__libc_init_array+0x24>
 8002b10:	f000 f822 	bl	8002b58 <_init>
 8002b14:	2500      	movs	r5, #0
 8002b16:	4e0a      	ldr	r6, [pc, #40]	; (8002b40 <__libc_init_array+0x40>)
 8002b18:	4c0a      	ldr	r4, [pc, #40]	; (8002b44 <__libc_init_array+0x44>)
 8002b1a:	1ba4      	subs	r4, r4, r6
 8002b1c:	10a4      	asrs	r4, r4, #2
 8002b1e:	42a5      	cmp	r5, r4
 8002b20:	d105      	bne.n	8002b2e <__libc_init_array+0x2e>
 8002b22:	bd70      	pop	{r4, r5, r6, pc}
 8002b24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b28:	4798      	blx	r3
 8002b2a:	3501      	adds	r5, #1
 8002b2c:	e7ee      	b.n	8002b0c <__libc_init_array+0xc>
 8002b2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b32:	4798      	blx	r3
 8002b34:	3501      	adds	r5, #1
 8002b36:	e7f2      	b.n	8002b1e <__libc_init_array+0x1e>
 8002b38:	08002bc8 	.word	0x08002bc8
 8002b3c:	08002bc8 	.word	0x08002bc8
 8002b40:	08002bc8 	.word	0x08002bc8
 8002b44:	08002bcc 	.word	0x08002bcc

08002b48 <memset>:
 8002b48:	4603      	mov	r3, r0
 8002b4a:	4402      	add	r2, r0
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d100      	bne.n	8002b52 <memset+0xa>
 8002b50:	4770      	bx	lr
 8002b52:	f803 1b01 	strb.w	r1, [r3], #1
 8002b56:	e7f9      	b.n	8002b4c <memset+0x4>

08002b58 <_init>:
 8002b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b5a:	bf00      	nop
 8002b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b5e:	bc08      	pop	{r3}
 8002b60:	469e      	mov	lr, r3
 8002b62:	4770      	bx	lr

08002b64 <_fini>:
 8002b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b66:	bf00      	nop
 8002b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b6a:	bc08      	pop	{r3}
 8002b6c:	469e      	mov	lr, r3
 8002b6e:	4770      	bx	lr
